From 59548a99dae829dfa16a8f36d3468375b3c128f2 Mon Sep 17 00:00:00 2001
From: Don Gunn <don.gunn@futureelectronics.com>
Date: Mon, 2 Dec 2024 09:35:05 -0800
Subject: [PATCH] add in driver for AR0830 from On Semi

---
 build-all-isp.sh                              |    2 +
 imx/run.sh                                    |   28 +-
 imx/start_isp.sh                              |   11 +-
 .../case/config/ar0830_1080p_nodwe.json       |   55 +
 mediacontrol/case/config/ar0830_4k_nodwe.json |   55 +
 units/isi/CMakeLists.txt                      |    1 +
 units/isi/drv/AR0830/CMakeLists.txt           |  105 ++
 units/isi/drv/AR0830/Sensor0_Entry_ar0830.cfg |   11 +
 units/isi/drv/AR0830/calib/AR0830/AR0830.xml  | 1450 +++++++++++++++++
 units/isi/drv/AR0830/calib/CMakeLists.txt     |   44 +
 .../isi/drv/AR0830/include_priv/AR0830_priv.h |  246 +++
 units/isi/drv/AR0830/source/AR0830.c          | 1317 +++++++++++++++
 .../source/AR0830_mipi4lane_4k_init.txt       |  308 ++++
 .../drv/AR0830/source/formatted_output.txt    |  308 ++++
 .../drv/AR0830/source/reformat_hex_file.py    |   43 +
 units/isi/drv/Sensor0_Entry.cfg               |   23 +-
 units/isi/drv/Sensor0_Entry.cfg.bak           |   20 +
 17 files changed, 4009 insertions(+), 18 deletions(-)
 create mode 100755 mediacontrol/case/config/ar0830_1080p_nodwe.json
 create mode 100644 mediacontrol/case/config/ar0830_4k_nodwe.json
 create mode 100644 units/isi/drv/AR0830/CMakeLists.txt
 create mode 100644 units/isi/drv/AR0830/Sensor0_Entry_ar0830.cfg
 create mode 100644 units/isi/drv/AR0830/calib/AR0830/AR0830.xml
 create mode 100644 units/isi/drv/AR0830/calib/CMakeLists.txt
 create mode 100644 units/isi/drv/AR0830/include_priv/AR0830_priv.h
 create mode 100644 units/isi/drv/AR0830/source/AR0830.c
 create mode 100644 units/isi/drv/AR0830/source/AR0830_mipi4lane_4k_init.txt
 create mode 100644 units/isi/drv/AR0830/source/formatted_output.txt
 create mode 100755 units/isi/drv/AR0830/source/reformat_hex_file.py
 create mode 100644 units/isi/drv/Sensor0_Entry.cfg.bak

diff --git a/build-all-isp.sh b/build-all-isp.sh
index 607286f..66b8d38 100755
--- a/build-all-isp.sh
+++ b/build-all-isp.sh
@@ -89,6 +89,8 @@ fi
 cp -a appshell/build/generated/${BUILD_DIR}/lib/*.so* ${ISP_LIB_DIR}
 cp -a appshell/build/generated/${BUILD_TYPE}/bin/OS08a20* ${ISP_BIN_DIR}
 cp -a appshell/build/generated/${BUILD_TYPE}/bin/os08a20* ${ISP_BIN_DIR}
+cp -a appshell/build/generated/${BUILD_TYPE}/bin/AR0830* ${ISP_BIN_DIR}
+cp -a appshell/build/generated/${BUILD_TYPE}/bin/ar0830* ${ISP_BIN_DIR}
 cp -a appshell/build/generated/${BUILD_TYPE}/bin/isp_media_server ${ISP_BIN_DIR}
 cp -a appshell/build/generated/${BUILD_TYPE}/bin/*_test ${ISP_BIN_DIR}
 cp -a appshell/build/generated/${BUILD_DIR}/bin/*.cfg ${ISP_BIN_DIR}/
diff --git a/imx/run.sh b/imx/run.sh
index a9506d0..0a7a215 100755
--- a/imx/run.sh
+++ b/imx/run.sh
@@ -87,6 +87,23 @@ write_default_mode_files () {
 	echo "[mode.3]" >> DAA3840_MODES.txt
 	echo "xml = \"DAA3840_30MC_1080P-hdr.xml\"" >> DAA3840_MODES.txt
 	echo "dwe = \"dewarp_config/daA3840_30mc_1080P.json\"" >> DAA3840_MODES.txt
+	
+	# ON Semi AR0830 mode files
+	echo -n "" > AR0830_MODES.txt
+	echo "[mode.0]" >> AR0830_MODES.txt
+	echo "xml = \"AR0830.xml\"" >> AR0830_MODES.txt
+	echo "dwe = \"dewarp_config/ar0830_4k_nodwe.json\"" >> AR0830_MODES.txt
+	echo "[mode.1]" >> AR0830_MODES.txt
+	echo "xml = \"AR0830.xml\"" >> AR0830_MODES.txt
+	echo "dwe = \"dewarp_config/ar0830_1080p_nodwe.json\"" >> AR0830_MODES.txt
+	echo "[mode.2]" >> AR0830_MODES.txt
+	echo "xml = \"AR0830.xml\"" >> AR0830_MODES.txt
+	echo "dwe = \"dewarp_config/ar0830_4k_nodwe.json\"" >> AR0830_MODES.txt
+	echo "[mode.3]" >> AR0830_MODES.txt
+	echo "xml = \"AR0830.xml\"" >> AR0830_MODES.txt
+	echo "dwe = \"dewarp_config/ar0830_4k_nodwe.json\"" >> AR0830_MODES.txt
+
+	
 }
 
 # write the sensonr config file
@@ -194,7 +211,7 @@ load_modules () {
 write_default_mode_files
 
 echo "Trying configuration \"$ISP_CONFIG\"..."
-MODULES_TO_REMOVE=("basler-camera-driver-vvcam" "os08a20" "ov2775" "${MODULES[@]}")
+MODULES_TO_REMOVE=("basler-camera-driver-vvcam" "os08a20" "ov2775" "ar0830" "${MODULES[@]}")
 case "$ISP_CONFIG" in
 		basler_4k )
 			MODULES=("basler-camera-driver-vvcam" "${MODULES[@]}")
@@ -308,6 +325,15 @@ case "$ISP_CONFIG" in
                          write_sensor_cfg_file "Sensor0_Entry.cfg" $CAM_NAME $DRV_FILE $MODE_FILE $MODE
                          write_sensor_cfg_file "Sensor1_Entry.cfg" $CAM_NAME $DRV_FILE $MODE_FILE $MODE
                          ;;
+                 ar0830_4k )
+			 MODULES=("ar0830" "${MODULES[@]}")
+                         RUN_OPTION="CAMERA0"
+                         CAM_NAME="ar0830"
+                         DRV_FILE="ar0830.drv"
+                         MODE_FILE="AR0830_MODES.txt"
+                         MODE="0"
+                         write_sensor_cfg_file "Sensor0_Entry.cfg" $CAM_NAME $DRV_FILE $MODE_FILE $MODE
+                         ;;
 		 *)
 			echo "ISP configuration \"$ISP_CONFIG\" unsupported."
 			echo -e "$USAGE" >&2
diff --git a/imx/start_isp.sh b/imx/start_isp.sh
index d544b4c..c88d22c 100755
--- a/imx/start_isp.sh
+++ b/imx/start_isp.sh
@@ -10,7 +10,7 @@ RUNTIME_DIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
 NR_DEVICE_TREE_BASLER=$(grep basler-camera-vvcam `find /sys/firmware/devicetree/base/soc@0/ -name compatible | grep i2c` -l | wc -l 2> /dev/null)
 NR_DEVICE_TREE_OV5640=$(grep ov5640 `find /sys/firmware/devicetree/base/soc@0/ -name compatible | grep i2c` -l | wc -l 2> /dev/null)
 NR_DEVICE_TREE_OS08A20=$(grep os08a20 `find /sys/firmware/devicetree/base/soc@0/ -name compatible | grep i2c` -l | wc -l 2> /dev/null)
-
+NR_DEVICE_TREE_AR0830=$(grep ar0830 `find /sys/firmware/devicetree/base/soc@0/ -name compatible | grep i2c` -l | wc -l 2> /dev/null)
 
 # check if the basler device has been enabled in the device tree
 if [ $NR_DEVICE_TREE_BASLER -eq 1 ]; then
@@ -69,6 +69,15 @@ elif [ $NR_DEVICE_TREE_OS08A20 -eq 2 ]; then
 	# Available configurations: dual_Os08a20_1080p60, dual_Os08a20_1080p30hdr
 	exec ./run.sh -c dual_os08a20_1080p60 -lm
 
+elif [ $NR_DEVICE_TREE_AR0830 -eq 2 ]; then
+
+	echo "Starting isp_media_server for AR0830"
+
+	cd $RUNTIME_DIR
+	# Default configuration for Os08a20: dual_Os08a20_1080p60
+	# Available configurations: dual_Os08a20_1080p60, dual_Os08a20_1080p30hdr
+	exec ./run.sh -c ar0830_4k -lm
+
 else
 	# no device tree found exit with code no device or address
 	echo "No device tree found for Basler camera or os08a20, check dtb file!" >&2
diff --git a/mediacontrol/case/config/ar0830_1080p_nodwe.json b/mediacontrol/case/config/ar0830_1080p_nodwe.json
new file mode 100755
index 0000000..06ffe71
--- /dev/null
+++ b/mediacontrol/case/config/ar0830_1080p_nodwe.json
@@ -0,0 +1,55 @@
+{
+  "?supported components" : [ "NativeSensor", "NativeDewarp", "LocalDisplay", "V4l2Control", "FakeSource" ],
+
+  "using components" : [
+    {
+        "classname" : "NativeSensor",
+        "id" : "sensor0",
+        "isp.index" : 0
+    },
+    {
+      "classname" : "NativeDewarp",
+      "id" : "dewarp",
+      "?dewarpMode": "LENS_CORRECTION, FISHEYE_EXPAND, SPLIT_SCREEN",
+      "dewarpMode": "FISHEYE_DEWARP",
+      "scale": {
+        "roix": 0,
+        "roiy": 0,
+        "factor": 1.0
+      },
+      "split": {
+        "horizon_line": 540,
+        "vertical_line_up": 960,
+        "vertical_line_down": 960
+      },
+      "camera_matrix": [6.5516074404594690e+002,0.0, 9.6420599053623062e+002, 0.0,6.5552406676868952e+002,5.3203601317192908e+002,0.0,0.0,1.0],
+      "distortion_coeff": [-2.2095698671518085e-002,3.8543889520066955e-003,-5.9060355970132873e-003,1.9007362178503509e-003,0.0,0.0,0.0,0.0],
+      "perspective": [1.0, 0, 0, 0, 1, 0, 0, 0, 1],
+      "bypass" : true,
+      "hflip" : false
+    },
+    {
+      "classname" : "V4l2Control",
+      "id" : "v4l2"
+    }
+  ],
+  "streams" : [
+    {
+        "links" : [
+          { "prev" : "sensor0", "srcpad" : 0, "next" : "dewarp", "sinkpad": 0 },
+          { "prev" : "dewarp", "srcpad" : 0, "next" : "v4l2", "sinkpad": 0 }
+        ],
+        "caps" : {
+          "availableStreamConfigurations" : [
+            ["YUV420SP", 1280, 720],
+            ["YUV420SP", 1920, 1080],
+            ["YUV422SP", 1280, 720],
+            ["YUV422SP", 1920, 1080],
+            ["YUV422I", 1280, 720],
+            ["YUV422I", 1920, 1080],
+            ["YUV422I", 3840, 2160]
+          ]
+        }
+    }
+  ]
+}
diff --git a/mediacontrol/case/config/ar0830_4k_nodwe.json b/mediacontrol/case/config/ar0830_4k_nodwe.json
new file mode 100644
index 0000000..92ec3fe
--- /dev/null
+++ b/mediacontrol/case/config/ar0830_4k_nodwe.json
@@ -0,0 +1,55 @@
+{
+  "?supported components" : [ "NativeSensor", "NativeDewarp", "LocalDisplay", "V4l2Control", "FakeSource" ],
+
+  "using components" : [
+    {
+        "classname" : "NativeSensor",
+        "id" : "sensor0",
+        "isp.index" : 0
+    },
+    {
+      "classname" : "NativeDewarp",
+      "id" : "dewarp",
+      "?dewarpMode": "LENS_CORRECTION, FISHEYE_EXPAND, SPLIT_SCREEN,FISHEYE_DEWARP",
+      "dewarpMode": "LENS_CORRECTION",
+      "scale": {
+        "roix": 0,
+        "roiy": 0,
+        "factor": 1.0
+      },
+      "split": {
+        "horizon_line": 540,
+        "vertical_line_up": 960,
+        "vertical_line_down": 960
+      },
+      "camera_matrix": [  1.9382053715646130e+003, 0.0, 1.9367040317520732e+003, 0.0, 1.9382053715646130e+003, 1.0995906524580364e+003, 0.0, 0.0, 1.0 ],
+      "distortion_coeff": [ -2.9762301011581477e-001, 9.9990207531256287e-002, 7.1750118655391590e-007, -4.8214607611670856e-004, -1.6082698420030749e-002 ],
+      "perspective": [1.0, 0, 0, 0, 1, 0, 0, 0, 1],
+      "bypass" : true,
+      "hflip" : false
+    },
+    {
+      "classname" : "V4l2Control",
+      "id" : "v4l2"
+    }
+  ],
+  "streams" : [
+    {
+        "links" : [
+          { "prev" : "sensor0", "srcpad" : 0, "next" : "dewarp", "sinkpad": 0 },
+          { "prev" : "dewarp", "srcpad" : 0, "next" : "v4l2", "sinkpad": 0 }
+        ],
+        "caps" : {
+          "availableStreamConfigurations" : [
+            ["YUV420SP", 1280, 720],
+            ["YUV420SP", 1920, 1080],
+            ["YUV422SP", 1280, 720],
+            ["YUV422SP", 1920, 1080],
+            ["YUV422I", 1280, 720],
+            ["YUV422I", 1920, 1080],
+            ["YUV422I", 3840, 2160]
+          ]
+        }
+    }
+  ]
+}
diff --git a/units/isi/CMakeLists.txt b/units/isi/CMakeLists.txt
index 8cd95b5..9fa3dc5 100755
--- a/units/isi/CMakeLists.txt
+++ b/units/isi/CMakeLists.txt
@@ -72,6 +72,7 @@ if (GENERATE_PARTITION_BUILD)
 add_subdirectory( drv/OV2775 )
 add_subdirectory( drv/OS08a20 )
 add_subdirectory( drv/AR1335 )
+add_subdirectory( drv/AR0830 )
 #add_subdirectory( drv/OV5630 )
 ###add_subdirectory( drv/OV8810 )
 #add_subdirectory( drv/OV14825 )
diff --git a/units/isi/drv/AR0830/CMakeLists.txt b/units/isi/drv/AR0830/CMakeLists.txt
new file mode 100644
index 0000000..7e67653
--- /dev/null
+++ b/units/isi/drv/AR0830/CMakeLists.txt
@@ -0,0 +1,105 @@
+cmake_minimum_required(VERSION 2.6)
+
+# define module name & interface version
+set (module ar0830)
+
+# define interface version
+set (${module}_INTERFACE_CURRENT  1)
+set (${module}_INTERFACE_REVISION 0)
+set (${module}_INTERFACE_AGE      0)
+
+# we want to compile all .c files as default
+file(GLOB libsources source/AR0830.c )
+
+# set public headers, these get installed
+file(GLOB pub_headers include/*.h)
+
+# define include paths
+include_directories(
+    include
+    include_priv
+    ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/include
+    )
+
+# module specific defines
+###add_definitions(-Wno-error=unused-function)
+
+# add lib to build env
+#add_library(${module}_static STATIC ${libsources})
+add_library(${module}_shared SHARED ${libsources})
+
+#SET_TARGET_PROPERTIES(${module}_static PROPERTIES OUTPUT_NAME     ${module})
+#SET_TARGET_PROPERTIES(${module}_static PROPERTIES LINK_FLAGS      -static)
+#SET_TARGET_PROPERTIES(${module}_static PROPERTIES FRAMEWORK       TRUE PUBLIC_HEADER "${pub_headers}")
+
+SET_TARGET_PROPERTIES(${module}_shared PROPERTIES OUTPUT_NAME     ${module})
+SET_TARGET_PROPERTIES(${module}_shared PROPERTIES LINK_FLAGS      -shared)
+SET_TARGET_PROPERTIES(${module}_shared PROPERTIES SOVERSION       ${${module}_INTERFACE_CURRENT})
+SET_TARGET_PROPERTIES(${module}_shared PROPERTIES VERSION         ${${module}_INTERFACE_CURRENT}.${${module}_INTERFACE_REVISION}.${${module}_INTERFACE_AGE})
+SET_TARGET_PROPERTIES(${module}_shared PROPERTIES FRAMEWORK       TRUE PUBLIC_HEADER "${pub_headers}")
+
+# add convenience target: put sensor driver into the 'bin' output dir as well
+if ( NOT ANDROID )
+add_custom_target(${module}.drv
+                  ALL
+                  COMMAND ${CMAKE_COMMAND} -E copy ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/lib/lib${module}.so.${${module}_INTERFACE_CURRENT} ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/bin/${module}.drv
+                  DEPENDS ${module}_shared
+                  COMMENT "Copying ${module} driver module"
+                  )
+endif()
+
+if(${APPMODE} STREQUAL NATIVE)
+add_custom_target(${module}.init
+                  ALL
+		  DEPENDS ${module}_shared
+                  COMMENT "Copying ${module} init files"
+                  )
+endif (${APPMODE} STREQUAL NATIVE)
+
+# define lib dependencies
+#target_link_libraries(${module}_static
+#                      ${platform_libs}
+#                      ${base_libs}
+#                      ${drv_libs}
+#                      isi_shared
+#                      )
+
+#target_link_libraries(${module}_shared
+#                      ${platform_libs}
+#                      ${base_libs}
+#                      ${drv_libs}
+#                      isi_shared
+#                      )
+
+# define stuff to install
+#install(TARGETS ${module}_static
+#        PUBLIC_HEADER   DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${module}
+#        ARCHIVE         DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
+#        )
+
+install(TARGETS ${module}_shared
+        PUBLIC_HEADER   DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${module}
+        ARCHIVE         DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/${module}
+        LIBRARY         DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/${module}
+        )
+
+# install the sensor driver as well, but to 'bin' location!
+install(FILES       ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/lib/lib${module}.so.${${module}_INTERFACE_CURRENT}
+        DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
+        RENAME      ${module}.drv
+        )
+
+if( DEFINED APPSHELL_TOP_COMPILE)
+add_custom_target(copy_shell_libs_${module} ALL
+       COMMENT "##Copy libs to shell libs"
+       COMMAND ${CMAKE_COMMAND} -E copy ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/lib/lib${module}.so ${CMAKE_HOME_DIRECTORY}/shell_libs/${APPMODE}/ispcore/${PLATFORM}/lib${module}.so
+       #COMMAND ${CMAKE_COMMAND} -E copy_directory ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/include/${module} ${CMAKE_HOME_DIRECTORY}/shell_libs/include/units_headers/${module}
+)
+add_dependencies(copy_shell_libs_${module} ${module}_shared)
+endif( DEFINED APPSHELL_TOP_COMPILE)
+
+# create common targets for this module
+include(${UNITS_TOP_DIRECTORY}/targets.cmake)
+
+# create calib data targets
+add_subdirectory(calib)
diff --git a/units/isi/drv/AR0830/Sensor0_Entry_ar0830.cfg b/units/isi/drv/AR0830/Sensor0_Entry_ar0830.cfg
new file mode 100644
index 0000000..466dbfc
--- /dev/null
+++ b/units/isi/drv/AR0830/Sensor0_Entry_ar0830.cfg
@@ -0,0 +1,11 @@
+name="ar0830"
+drv ="ar0830.drv"
+mode = 0
+
+[mode.0]
+xml = "AR0830.xml"
+dwe = "dewarp_config/sensor_dwe_os08a20_4K_config.json"
+
+[mode.1]
+xml = "AR0830.xml"
+dwe = "dewarp_config/sensor_dwe_os08a20_4K_config.json"
diff --git a/units/isi/drv/AR0830/calib/AR0830/AR0830.xml b/units/isi/drv/AR0830/calib/AR0830/AR0830.xml
new file mode 100644
index 0000000..d856635
--- /dev/null
+++ b/units/isi/drv/AR0830/calib/AR0830/AR0830.xml
@@ -0,0 +1,1450 @@
+<?xml version="1.0" ?>
+<matfile>
+   <header type="struct" size="[1 1]">
+      <creation_date index="1" type="char" size="[1 11]">
+         23-Jan-2021
+      </creation_date>
+      <creator index="1" type="char" size="[1 4]">
+         Ting
+      </creator>
+      <sensor_name index="1" type="char" size="[1 6]">
+         AR0830
+      </sensor_name>
+      <sample_name index="1" type="char" size="[1 9]">
+         8Mlens_01
+      </sample_name>
+      <generator_version index="1" type="char" size="[1 7]">
+         v2.0.14
+      </generator_version>
+      <resolution index="1" type="cell" size="[1 1]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 9]">
+               3840x2160
+            </name>
+            <id index="1" type="char" size="[1 10]">
+               0x00000001
+            </id>
+            <width index="1" type="double" size="[1 1]">
+               [ 3840]
+            </width>
+            <height index="1" type="double" size="[1 1]">
+               [ 2160]
+            </height>
+            <framerate index="1" type="cell" size="[1 3]">
+               <cell index="1" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 6]">
+                     FPS_15
+                  </name>
+                  <fps index="1" type="double" size="[1 1]">
+                     [ 14.9916]
+                  </fps>
+               </cell>
+               <cell index="2" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 6]">
+                     FPS_10
+                  </name>
+                  <fps index="1" type="double" size="[1 1]">
+                     [ 9.9944]
+                  </fps>
+               </cell>
+               <cell index="3" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 6]">
+                     FPS_05
+                  </name>
+                  <fps index="1" type="double" size="[1 1]">
+                     [ 4.9972]
+                  </fps>
+               </cell>
+            </framerate>
+         </cell>
+      </resolution>
+   </header>
+   <sensor type="struct" size="[1 1]">
+      <AWB index="1" type="struct" size="[1 1]">
+         <globals index="1" type="cell" size="[1 1]">
+            <cell index="1" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 9]">
+                  3840x2160
+               </name>
+               <resolution index="1" type="char" size="[1 9]">
+                  3840x2160
+               </resolution>
+               <SVDMeanValue index="1" type="double" size="[1 3]">
+                  [0.344719 0.417956 0.23732]
+               </SVDMeanValue>
+               <PCAMatrix index="1" type="double" size="[3 2]">
+                  [-0.751301 0.0987753 0.652526 0.319708 -0.8105 0.49079]
+               </PCAMatrix>
+               <CenterLine index="1" type="double" size="[1 3]">
+                  [-0.704711 -0.709494 -2.4616]
+               </CenterLine>
+               <afRg2 index="1" type="double" size="[1 16]">
+                  [1.21109 1.26107 1.31105 1.36102 1.411 1.46098 1.50457 1.56632 1.60693 1.66089 1.71086 1.76084 1.81082 1.86079 1.91077 1.9922]
+               </afRg2>
+               <afMaxDist2 index="1" type="double" size="[1 16]">
+                  [-0.0580457 -0.0232956 0.00261193 0.0228589 0.0371433 0.0464924 0.0843572 0.12954 0.07805 0.0445457 0.0367267 0.0267113 0.0149531 0.00132142 -0.0135904 -0.027377]
+               </afMaxDist2>
+               <afRg1 index="1" type="double" size="[1 16]">
+                  [1.21109 1.26107 1.31105 1.36102 1.411 1.49067 1.52087 1.54932 1.58971 1.66089 1.71086 1.76084 1.81701 1.84366 1.88561 1.9848]
+               </afRg1>
+               <afMaxDist1 index="1" type="double" size="[1 16]">
+                  [0.0680457 0.0332956 0.00738807 -0.0128589 -0.0271433 0.002169 -0.00400661 0.00775588 -0.00235865 -0.0345457 -0.0267267 -0.0167113 0.00960129 0.0290344 0.0476928 0.073968]
+               </afMaxDist1>
+               <afGlobalFade2 index="1" type="double" size="[1 16]">
+                  [0.8 0.88005 0.9601 1.04015 1.1202 1.20025 1.2803 1.36035 1.4404 1.52045 1.6005 1.68055 1.7606 1.84065 1.9207 2.0007]
+               </afGlobalFade2>
+               <afGlobalGainDistance2 index="1" type="double" size="[1 16]">
+                  [-0.380948 -0.285235 -0.195221 -0.109861 -0.0340417 0.0314949 0.0825748 0.117501 0.1383 0.146726 0.145545 0.136652 0.121888 0.10209 0.0783045 0.050906]
+               </afGlobalGainDistance2>
+               <afGlobalFade1 index="1" type="double" size="[1 16]">
+                  [0.8 0.88005 0.9601 1.06512 1.1202 1.20025 1.2803 1.36035 1.4404 1.52045 1.6005 1.68055 1.7606 1.84065 1.9207 2.0007]
+               </afGlobalFade1>
+               <afGlobalGainDistance1 index="1" type="double" size="[1 16]">
+                  [0.580948 0.485235 0.395221 0.370924 0.234042 0.168505 0.117425 0.082499 0.0617005 0.0532736 0.0544552 0.0633475 0.0781117 0.0979104 0.121696 0.14909]
+               </afGlobalGainDistance1>
+               <fRgProjIndoorMin index="1" type="double" size="[1 1]">
+                  [ 1.2111]
+               </fRgProjIndoorMin>
+               <fRgProjMax index="1" type="double" size="[1 1]">
+                  [ 1.9607]
+               </fRgProjMax>
+               <fRgProjMaxSky index="1" type="double" size="[1 1]">
+                  [ 2.0007]
+               </fRgProjMaxSky>
+               <fRgProjOutdoorMin index="1" type="double" size="[1 1]">
+                  [ 1.6609]
+               </fRgProjOutdoorMin>
+               <awb_clip_outdoor index="1" type="char" size="[1 3]">
+                  D50
+               </awb_clip_outdoor>
+               <K_Factor index="1" type="double" size="[1 1]">
+                  [ 4.5676]
+               </K_Factor>
+               <afFade2 index="1" type="double" size="[1 6]">
+                  [0.75 1.28836 1.77672 2.164 2.6 3.0618]
+               </afFade2>
+               <afCbMinRegionMax index="1" type="double" size="[1 6]">
+                  [114 114 105 95 95 90]
+               </afCbMinRegionMax>
+               <afCrMinRegionMax index="1" type="double" size="[1 6]">
+                  [83 83 110 120 122 128]
+               </afCrMinRegionMax>
+               <afMaxCSumRegionMax index="1" type="double" size="[1 6]">
+                  [28 27 18 16 9 9]
+               </afMaxCSumRegionMax>
+               <afCbMinRegionMin index="1" type="double" size="[1 6]">
+                  [123 123 123 123 123 120]
+               </afCbMinRegionMin>
+               <afCrMinRegionMin index="1" type="double" size="[1 6]">
+                  [123 123 123 123 123 126]
+               </afCrMinRegionMin>
+               <afMaxCSumRegionMin index="1" type="double" size="[1 6]">
+                  [5 5 5 5 5 5]
+               </afMaxCSumRegionMin>
+               <RegionSize index="1" type="double" size="[1 1]">
+                  [ 1]
+               </RegionSize>
+               <RegionSizeInc index="1" type="double" size="[1 1]">
+                  [ 0.8]
+               </RegionSizeInc>
+               <RegionSizeDec index="1" type="double" size="[1 1]">
+                  [ 0.05]
+               </RegionSizeDec>
+               <IIR index="1" type="struct" size="[1 1]">
+                  <DampCoefAdd index="1" type="double" size="[1 1]">
+                     [ 0.05]
+                  </DampCoefAdd>
+                  <DampCoefSub index="1" type="double" size="[1 1]">
+                     [ 0.05]
+                  </DampCoefSub>
+                  <DampFilterThreshold index="1" type="double" size="[1 1]">
+                     [ 0.4]
+                  </DampFilterThreshold>
+                  <DampingCoefMin index="1" type="double" size="[1 1]">
+                     [ 0.5]
+                  </DampingCoefMin>
+                  <DampingCoefMax index="1" type="double" size="[1 1]">
+                     [ 0.9]
+                  </DampingCoefMax>
+                  <DampingCoefInit index="1" type="double" size="[1 1]">
+                     [ 0.5]
+                  </DampingCoefInit>
+                  <ExpPriorFilterSizeMax index="1" type="double" size="[1 1]">
+                     [ 50]
+                  </ExpPriorFilterSizeMax>
+                  <ExpPriorFilterSizeMin index="1" type="double" size="[1 1]">
+                     [ 1]
+                  </ExpPriorFilterSizeMin>
+                  <ExpPriorMiddle index="1" type="double" size="[1 1]">
+                     [ 0.5]
+                  </ExpPriorMiddle>
+               </IIR>
+            </cell>
+         </globals>
+         <illumination index="1" type="cell" size="[1 5]">
+            <cell index="1" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 1]">
+                  A
+               </name>
+               <doorType index="1" type="char" size="[1 6]">
+                  Indoor
+               </doorType>
+               <GMM index="1" type="struct" size="[1 1]">
+                  <invCovMatrix index="1" type="double" size="[2 2]">
+                     [2944.13 3770.49 3770.49 7032.2643]
+                  </invCovMatrix>
+                  <GaussianScalingFactor index="1" type="double" size="[1 1]">
+                     [ 405.37]
+                  </GaussianScalingFactor>
+                  <tau index="1" type="double" size="[1 2]">
+                     [1 1]
+                  </tau>
+                  <GaussianMeanValue index="1" type="double" size="[1 2]">
+                     [-0.0362827 -0.029232]
+                  </GaussianMeanValue>
+               </GMM>
+               <aLSC index="1" type="cell" size="[1 1]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <resolution index="1" type="char" size="[1 9]">
+                        3840x2160
+                     </resolution>
+                     <LSC_PROFILE_LIST index="1" type="char" size="[1 14]">
+                        3840x2160_A_90
+                     </LSC_PROFILE_LIST>
+                  </cell>
+               </aLSC>
+               <manualWB index="1" type="double" size="[1 4]">
+                  [1.20801 1 1 2.198]
+               </manualWB>
+               <manualccMatrix index="1" type="double" size="[3 3]">
+                  [1.87899 -0.421575 -0.451771 -0.432093 1.88176 -0.412427 -0.423795 -1.54908 3.0427]
+               </manualccMatrix>
+               <manualccOffsets index="1" type="double" size="[1 3]">
+                  [-23.1351 -24.0206 -43.3537]
+               </manualccOffsets>
+               <awbType index="1" type="char" size="[1 4]">
+                  AUTO
+               </awbType>
+               <sat_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <sat index="1" type="double" size="[1 4]">
+                     [100 95 90 74]
+                  </sat>
+               </sat_CT>
+               <vig_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <vig index="1" type="double" size="[1 4]">
+                     [100 95 90 70]
+                  </vig>
+               </vig_CT>
+               <aCC index="1" type="struct" size="[1 1]">
+                  <CC_PROFILE_LIST index="1" type="char" size="[1 4]">
+                     A_90
+                  </CC_PROFILE_LIST>
+               </aCC>
+            </cell>
+            <cell index="2" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 3]">
+                  D50
+               </name>
+               <doorType index="1" type="char" size="[1 7]">
+                  Outdoor
+               </doorType>
+               <GMM index="1" type="struct" size="[1 1]">
+                  <invCovMatrix index="1" type="double" size="[2 2]">
+                     [610.99 432.642 432.642 2559.1148]
+                  </invCovMatrix>
+                  <GaussianScalingFactor index="1" type="double" size="[1 1]">
+                     [ 186.7217]
+                  </GaussianScalingFactor>
+                  <tau index="1" type="double" size="[1 2]">
+                     [1 1]
+                  </tau>
+                  <GaussianMeanValue index="1" type="double" size="[1 2]">
+                     [0.107357 -0.041249]
+                  </GaussianMeanValue>
+               </GMM>
+               <aLSC index="1" type="cell" size="[1 1]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <resolution index="1" type="char" size="[1 9]">
+                        3840x2160
+                     </resolution>
+                     <LSC_PROFILE_LIST index="1" type="char" size="[1 16]">
+                        3840x2160_D50_90
+                     </LSC_PROFILE_LIST>
+                  </cell>
+               </aLSC>
+               <manualWB index="1" type="double" size="[1 4]">
+                  [1.84153 1 1 1.609]
+               </manualWB>
+               <manualccMatrix index="1" type="double" size="[3 3]">
+                  [2.27251 -1.02358 -0.241757 -0.303155 1.83125 -0.521704 -0.133401 -0.813223 1.9811]
+               </manualccMatrix>
+               <manualccOffsets index="1" type="double" size="[1 3]">
+                  [-20.1763 -26.1756 -31.5957]
+               </manualccOffsets>
+               <awbType index="1" type="char" size="[1 4]">
+                  AUTO
+               </awbType>
+               <sat_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <sat index="1" type="double" size="[1 4]">
+                     [100 95 90 74]
+                  </sat>
+               </sat_CT>
+               <vig_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <vig index="1" type="double" size="[1 4]">
+                     [100 95 90 70]
+                  </vig>
+               </vig_CT>
+               <aCC index="1" type="struct" size="[1 1]">
+                  <CC_PROFILE_LIST index="1" type="char" size="[1 6]">
+                     D50_90
+                  </CC_PROFILE_LIST>
+               </aCC>
+            </cell>
+            <cell index="3" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 3]">
+                  D65
+               </name>
+               <doorType index="1" type="char" size="[1 7]">
+                  Outdoor
+               </doorType>
+               <GMM index="1" type="struct" size="[1 1]">
+                  <invCovMatrix index="1" type="double" size="[2 2]">
+                     [511.961 22.9255 22.9255 2032.8815]
+                  </invCovMatrix>
+                  <GaussianScalingFactor index="1" type="double" size="[1 1]">
+                     [ 162.3248]
+                  </GaussianScalingFactor>
+                  <tau index="1" type="double" size="[1 2]">
+                     [1 1]
+                  </tau>
+                  <GaussianMeanValue index="1" type="double" size="[1 2]">
+                     [0.135836 -0.029232]
+                  </GaussianMeanValue>
+               </GMM>
+               <aLSC index="1" type="cell" size="[1 1]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <resolution index="1" type="char" size="[1 9]">
+                        3840x2160
+                     </resolution>
+                     <LSC_PROFILE_LIST index="1" type="char" size="[1 16]">
+                        3840x2160_D65_90
+                     </LSC_PROFILE_LIST>
+                  </cell>
+               </aLSC>
+               <manualWB index="1" type="double" size="[1 4]">
+                  [1.9504 1 1 1.4604]
+               </manualWB>
+               <manualccMatrix index="1" type="double" size="[3 3]">
+                  [2.28045 -0.906833 -0.369215 -0.325811 1.94456 -0.59452 -0.127853 -0.70586 1.8868]
+               </manualccMatrix>
+               <manualccOffsets index="1" type="double" size="[1 3]">
+                  [-18.0154 -17.5202 -31.1898]
+               </manualccOffsets>
+               <awbType index="1" type="char" size="[1 4]">
+                  AUTO
+               </awbType>
+               <sat_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <sat index="1" type="double" size="[1 4]">
+                     [100 95 90 74]
+                  </sat>
+               </sat_CT>
+               <vig_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <vig index="1" type="double" size="[1 4]">
+                     [100 95 90 70]
+                  </vig>
+               </vig_CT>
+               <aCC index="1" type="struct" size="[1 1]">
+                  <CC_PROFILE_LIST index="1" type="char" size="[1 6]">
+                     D65_90
+                  </CC_PROFILE_LIST>
+               </aCC>
+            </cell>
+            <cell index="4" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 8]">
+                  F2 (CWF)
+               </name>
+               <doorType index="1" type="char" size="[1 6]">
+                  Indoor
+               </doorType>
+               <GMM index="1" type="struct" size="[1 1]">
+                  <invCovMatrix index="1" type="double" size="[2 2]">
+                     [718.074 -190.661 -190.661 2071.3496]
+                  </invCovMatrix>
+                  <GaussianScalingFactor index="1" type="double" size="[1 1]">
+                     [ 191.716]
+                  </GaussianScalingFactor>
+                  <tau index="1" type="double" size="[1 2]">
+                     [1 1]
+                  </tau>
+                  <GaussianMeanValue index="1" type="double" size="[1 2]">
+                     [0.0471888 -0.066138]
+                  </GaussianMeanValue>
+               </GMM>
+               <aLSC index="1" type="cell" size="[1 1]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <resolution index="1" type="char" size="[1 9]">
+                        3840x2160
+                     </resolution>
+                     <LSC_PROFILE_LIST index="1" type="char" size="[1 15]">
+                        3840x2160_F2_90
+                     </LSC_PROFILE_LIST>
+                  </cell>
+               </aLSC>
+               <manualWB index="1" type="double" size="[1 4]">
+                  [1.65285 1 1 2.0208]
+               </manualWB>
+               <manualccMatrix index="1" type="double" size="[3 3]">
+                  [2.51016 -1.06404 -0.442254 -0.511818 1.81781 -0.257583 -0.221554 -0.957586 2.2514]
+               </manualccMatrix>
+               <manualccOffsets index="1" type="double" size="[1 3]">
+                  [-15.829 -23.0549 -41.6949]
+               </manualccOffsets>
+               <awbType index="1" type="char" size="[1 4]">
+                  AUTO
+               </awbType>
+               <sat_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <sat index="1" type="double" size="[1 4]">
+                     [100 95 90 74]
+                  </sat>
+               </sat_CT>
+               <vig_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <vig index="1" type="double" size="[1 4]">
+                     [100 95 90 70]
+                  </vig>
+               </vig_CT>
+               <aCC index="1" type="struct" size="[1 1]">
+                  <CC_PROFILE_LIST index="1" type="char" size="[1 5]">
+                     F2_90
+                  </CC_PROFILE_LIST>
+               </aCC>
+            </cell>
+            <cell index="5" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 10]">
+                  F11 (TL84)
+               </name>
+               <doorType index="1" type="char" size="[1 6]">
+                  Indoor
+               </doorType>
+               <GMM index="1" type="struct" size="[1 1]">
+                  <invCovMatrix index="1" type="double" size="[2 2]">
+                     [636.161 194.596 194.596 1890.9913]
+                  </invCovMatrix>
+                  <GaussianScalingFactor index="1" type="double" size="[1 1]">
+                     [ 171.792]
+                  </GaussianScalingFactor>
+                  <tau index="1" type="double" size="[1 2]">
+                     [0.9 1]
+                  </tau>
+                  <GaussianMeanValue index="1" type="double" size="[1 2]">
+                     [0.041254 -0.048481]
+                  </GaussianMeanValue>
+               </GMM>
+               <aLSC index="1" type="cell" size="[1 1]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <resolution index="1" type="char" size="[1 9]">
+                        3840x2160
+                     </resolution>
+                     <LSC_PROFILE_LIST index="1" type="char" size="[1 16]">
+                        3840x2160_F11_90
+                     </LSC_PROFILE_LIST>
+                  </cell>
+               </aLSC>
+               <manualWB index="1" type="double" size="[1 4]">
+                  [1.5469 1 1 1.9186]
+               </manualWB>
+               <manualccMatrix index="1" type="double" size="[3 3]">
+                  [2.23964 -0.871463 -0.332505 -0.435189 1.76882 -0.327796 -0.223577 -0.971202 2.2787]
+               </manualccMatrix>
+               <manualccOffsets index="1" type="double" size="[1 3]">
+                  [-33.8657 -23.8829 -15.5632]
+               </manualccOffsets>
+               <awbType index="1" type="char" size="[1 4]">
+                  AUTO
+               </awbType>
+               <sat_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <sat index="1" type="double" size="[1 4]">
+                     [100 95 90 74]
+                  </sat>
+               </sat_CT>
+               <vig_CT index="1" type="struct" size="[1 1]">
+                  <gains index="1" type="double" size="[1 4]">
+                     [1 2 4 8]
+                  </gains>
+                  <vig index="1" type="double" size="[1 4]">
+                     [100 95 90 70]
+                  </vig>
+               </vig_CT>
+               <aCC index="1" type="struct" size="[1 1]">
+                  <CC_PROFILE_LIST index="1" type="char" size="[1 6]">
+                     F11_90
+                  </CC_PROFILE_LIST>
+               </aCC>
+            </cell>
+         </illumination>
+      </AWB>
+      <LSC index="1" type="cell" size="[1 5]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 14]">
+               3840x2160_A_90
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <illumination index="1" type="char" size="[1 1]">
+               A
+            </illumination>
+            <LSC_sectors index="1" type="double" size="[1 1]">
+               [ 16]
+            </LSC_sectors>
+            <LSC_No index="1" type="double" size="[1 1]">
+               [ 10]
+            </LSC_No>
+            <LSC_Xo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Xo>
+            <LSC_Yo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Yo>
+            <LSC_SECT_SIZE_X index="1" type="double" size="[1 8]">
+               [139 157 181 207 245 285 337 369]
+            </LSC_SECT_SIZE_X>
+            <LSC_SECT_SIZE_Y index="1" type="double" size="[1 8]">
+               [110 117 127 133 141 148 151 153]
+            </LSC_SECT_SIZE_Y>
+            <vignetting index="1" type="double" size="[1 1]">
+               [ 90]
+            </vignetting>
+            <LSC_SAMPLES_red index="1" type="double" size="[17 17]">
+               [2524 2347 2206 2018 1877 1693 1536 1417 1366 1414 1537 1708 1875 2095 2233 2425 2559 2416 2285 2113 1967 1793 1625 1465 1337 1293 1334 1456 1639 1811 1988 2170 2312 2503 2363 2195 2058 1895 1727 1551 1392 1268 1211 1263 1382 1557 1734 1925 2084 2271 2418 2297 2150 1995 1827 1663 1480 1324 1201 1155 1193 1319 1481 1678 1847 2020 2191 2348 2244 2088 1957 1772 1605 1424 1263 1146 1100 1138 1258 1424 1613 1787 1977 2126 2299 2230 2064 1907 1747 1563 1387 1226 1102 1064 1102 1224 1380 1564 1752 1935 2094 2262 2174 2034 1888 1717 1537 1352 1190 1077 1034 1074 1186 1348 1538 1714 1894 2073 2212 2160 2034 1868 1704 1525 1339 1174 1066 1024 1069 1174 1337 1523 1711 1885 2048 2208 2190 2026 1881 1709 1530 1342 1175 1064 1027 1068 1172 1334 1529 1712 1892 2062 2234 2198 2056 1890 1737 1547 1362 1189 1078 1039 1085 1192 1362 1543 1730 1921 2079 2234 2237 2079 1941 1758 1582 1395 1225 1107 1064 1107 1224 1390 1575 1766 1951 2119 2281 2263 2130 1970 1810 1629 1446 1277 1147 1100 1154 1270 1434 1628 1810 2005 2174 2334 2351 2203 2032 1866 1696 1510 1333 1210 1160 1207 1335 1501 1689 1872 2057 2233 2394 2407 2264 2104 1926 1756 1576 1412 1275 1221 1278 1402 1569 1759 1940 2115 2293 2459 2505 2324 2169 2003 1836 1649 1483 1354 1300 1345 1483 1645 1842 2024 2198 2372 2554 2531 2432 2231 2080 1894 1735 1569 1439 1380 1435 1560 1726 1911 2099 2281 2463 2608 2654 2472 2319 2141 1989 1805 1653 1516 1468 1510 1632 1807 1999 2175 2360 2521 2734]
+            </LSC_SAMPLES_red>
+            <LSC_SAMPLES_greenR index="1" type="double" size="[17 17]">
+               [2112 2007 1881 1760 1643 1524 1421 1341 1305 1347 1448 1561 1695 1814 1946 2080 2194 2071 1947 1819 1706 1583 1465 1370 1269 1244 1285 1377 1503 1627 1763 1890 2003 2140 2010 1883 1780 1651 1534 1418 1307 1218 1186 1223 1322 1447 1573 1707 1819 1960 2095 1959 1844 1732 1607 1490 1364 1251 1164 1131 1171 1266 1391 1525 1661 1784 1907 2035 1915 1799 1692 1573 1454 1324 1207 1118 1084 1124 1220 1347 1486 1607 1750 1870 1995 1884 1784 1654 1537 1420 1291 1170 1084 1056 1093 1184 1311 1450 1586 1710 1843 1970 1875 1756 1640 1527 1398 1267 1143 1061 1033 1064 1159 1288 1428 1562 1693 1827 1951 1857 1760 1642 1523 1387 1257 1133 1046 1024 1055 1151 1275 1417 1558 1684 1827 1938 1877 1754 1642 1526 1401 1261 1138 1047 1024 1056 1155 1276 1429 1555 1695 1825 1955 1891 1780 1655 1541 1414 1278 1143 1062 1029 1069 1160 1303 1437 1577 1717 1849 1977 1920 1797 1692 1573 1444 1310 1180 1081 1054 1094 1189 1324 1469 1617 1743 1883 2009 1967 1842 1732 1606 1480 1348 1217 1124 1085 1129 1231 1363 1508 1652 1791 1924 2049 2013 1906 1775 1662 1529 1404 1270 1167 1137 1179 1284 1417 1562 1702 1842 1979 2109 2071 1953 1833 1706 1581 1458 1330 1226 1187 1234 1342 1471 1619 1756 1889 2026 2172 2139 2009 1900 1756 1647 1513 1395 1289 1253 1295 1405 1539 1685 1811 1962 2099 2243 2188 2100 1950 1828 1706 1579 1455 1365 1321 1368 1473 1604 1737 1887 2022 2164 2295 2253 2133 2014 1878 1761 1638 1525 1426 1393 1426 1544 1653 1805 1940 2084 2239 2356]
+            </LSC_SAMPLES_greenR>
+            <LSC_SAMPLES_greenB index="1" type="double" size="[17 17]">
+               [2160 2028 1905 1786 1643 1533 1422 1324 1296 1326 1433 1553 1687 1839 1967 2088 2220 2106 1984 1848 1727 1601 1474 1357 1270 1234 1277 1370 1498 1640 1766 1909 2026 2168 2052 1923 1799 1679 1545 1430 1306 1213 1177 1213 1319 1444 1582 1711 1843 1992 2117 2005 1880 1768 1636 1503 1378 1258 1162 1127 1169 1265 1396 1542 1668 1807 1947 2074 1966 1854 1734 1600 1480 1340 1212 1119 1086 1124 1220 1357 1496 1636 1780 1903 2033 1946 1818 1703 1576 1447 1307 1184 1090 1055 1094 1194 1323 1478 1610 1751 1878 2009 1922 1816 1691 1560 1432 1289 1158 1065 1035 1071 1165 1307 1448 1592 1727 1872 2003 1915 1815 1684 1564 1424 1282 1145 1053 1032 1059 1162 1290 1443 1589 1720 1875 2001 1950 1823 1700 1570 1429 1287 1147 1056 1024 1068 1159 1302 1445 1595 1742 1877 2012 1947 1837 1711 1587 1452 1298 1164 1068 1039 1074 1176 1316 1468 1615 1765 1883 2039 1982 1871 1741 1620 1478 1338 1192 1094 1055 1101 1203 1344 1493 1646 1783 1929 2058 2034 1894 1786 1653 1516 1370 1233 1125 1089 1138 1239 1380 1544 1690 1832 1970 2100 2076 1952 1823 1696 1571 1428 1285 1177 1140 1186 1298 1429 1585 1729 1880 2020 2167 2137 2019 1877 1750 1617 1483 1342 1234 1193 1237 1345 1488 1643 1789 1934 2081 2219 2204 2058 1949 1803 1675 1535 1402 1296 1253 1302 1416 1552 1700 1848 1991 2133 2283 2238 2145 1988 1865 1726 1601 1469 1359 1323 1364 1474 1613 1759 1913 2055 2203 2338 2340 2183 2066 1915 1791 1653 1532 1427 1390 1429 1549 1673 1833 1964 2124 2267 2390]
+            </LSC_SAMPLES_greenB>
+            <LSC_SAMPLES_blue index="1" type="double" size="[17 17]">
+               [2146 2054 1910 1786 1675 1549 1430 1331 1282 1336 1455 1586 1717 1849 1989 2123 2227 2123 1989 1847 1744 1622 1487 1369 1268 1228 1284 1369 1520 1675 1793 1929 2049 2214 2043 1934 1812 1683 1562 1442 1313 1202 1172 1206 1320 1459 1609 1746 1858 2011 2146 2020 1882 1763 1642 1527 1386 1260 1160 1120 1160 1268 1403 1559 1695 1818 1957 2080 1975 1849 1735 1616 1479 1341 1208 1111 1082 1110 1215 1365 1513 1655 1790 1916 2062 1955 1829 1713 1601 1458 1317 1182 1090 1055 1086 1192 1336 1484 1642 1776 1884 2027 1909 1819 1698 1578 1442 1291 1158 1061 1031 1068 1156 1303 1461 1603 1745 1885 2006 1931 1815 1708 1578 1450 1280 1152 1049 1027 1056 1158 1299 1456 1609 1756 1872 2015 1924 1817 1714 1592 1451 1302 1150 1058 1024 1065 1157 1298 1465 1605 1754 1882 2023 1953 1849 1736 1615 1463 1317 1179 1067 1038 1080 1178 1326 1476 1640 1778 1904 2044 1977 1858 1759 1642 1501 1349 1199 1098 1054 1098 1209 1344 1512 1668 1802 1934 2067 2050 1901 1795 1680 1543 1392 1240 1129 1100 1142 1248 1395 1557 1707 1839 1964 2119 2086 1961 1846 1713 1601 1442 1299 1185 1145 1194 1304 1442 1607 1750 1881 2031 2154 2145 2016 1901 1773 1642 1511 1361 1247 1209 1252 1367 1507 1675 1796 1937 2091 2224 2192 2081 1959 1834 1705 1566 1429 1309 1276 1318 1426 1583 1720 1860 2010 2144 2296 2263 2176 2012 1881 1763 1628 1491 1392 1346 1391 1501 1644 1775 1916 2068 2206 2336 2357 2187 2108 1937 1814 1687 1571 1459 1420 1469 1574 1708 1837 1975 2128 2273 2399]
+            </LSC_SAMPLES_blue>
+         </cell>
+         <cell index="2" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 16]">
+               3840x2160_D50_90
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <illumination index="1" type="char" size="[1 3]">
+               D50
+            </illumination>
+            <LSC_sectors index="1" type="double" size="[1 1]">
+               [ 16]
+            </LSC_sectors>
+            <LSC_No index="1" type="double" size="[1 1]">
+               [ 10]
+            </LSC_No>
+            <LSC_Xo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Xo>
+            <LSC_Yo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Yo>
+            <LSC_SECT_SIZE_X index="1" type="double" size="[1 8]">
+               [143 159 181 208 244 288 334 363]
+            </LSC_SECT_SIZE_X>
+            <LSC_SECT_SIZE_Y index="1" type="double" size="[1 8]">
+               [113 119 126 134 140 147 150 151]
+            </LSC_SECT_SIZE_Y>
+            <vignetting index="1" type="double" size="[1 1]">
+               [ 90]
+            </vignetting>
+            <LSC_SAMPLES_red index="1" type="double" size="[17 17]">
+               [2410 2285 2132 1986 1822 1654 1506 1393 1345 1386 1500 1662 1835 2017 2171 2350 2456 2363 2210 2073 1900 1753 1590 1443 1318 1269 1307 1427 1592 1771 1940 2107 2246 2419 2300 2146 1996 1846 1683 1522 1363 1254 1199 1243 1357 1520 1698 1858 2026 2207 2353 2251 2110 1944 1777 1629 1456 1300 1190 1144 1180 1293 1454 1638 1809 1980 2138 2264 2197 2054 1908 1744 1582 1408 1252 1134 1091 1132 1242 1399 1571 1753 1933 2077 2240 2164 2037 1869 1711 1540 1365 1210 1097 1058 1091 1207 1358 1541 1706 1894 2051 2205 2163 1999 1857 1687 1522 1342 1181 1074 1036 1072 1181 1327 1513 1684 1861 2023 2178 2141 2003 1854 1688 1519 1338 1170 1065 1024 1061 1165 1325 1499 1676 1845 2021 2172 2172 2015 1858 1702 1534 1344 1178 1063 1025 1066 1165 1325 1504 1673 1851 2026 2191 2176 2022 1889 1723 1553 1369 1192 1080 1042 1079 1190 1344 1518 1702 1877 2038 2211 2203 2066 1916 1757 1588 1406 1227 1110 1060 1103 1213 1370 1554 1728 1902 2086 2245 2255 2099 1961 1789 1632 1446 1275 1149 1100 1145 1256 1418 1597 1764 1959 2119 2296 2299 2162 2009 1850 1686 1509 1330 1204 1153 1194 1310 1465 1651 1829 2009 2182 2358 2380 2213 2070 1904 1745 1574 1395 1265 1213 1261 1380 1542 1721 1892 2070 2236 2404 2422 2273 2136 1964 1808 1635 1467 1340 1286 1324 1445 1606 1792 1973 2139 2300 2460 2492 2375 2187 2033 1873 1699 1543 1422 1367 1410 1531 1684 1864 2032 2216 2384 2551 2579 2430 2286 2117 1948 1793 1633 1498 1460 1495 1618 1768 1942 2127 2299 2450 2589]
+            </LSC_SAMPLES_red>
+            <LSC_SAMPLES_greenR index="1" type="double" size="[17 17]">
+               [2084 1959 1863 1739 1616 1512 1411 1328 1298 1332 1426 1532 1667 1785 1915 2031 2136 2039 1914 1792 1678 1565 1458 1355 1271 1235 1266 1361 1487 1610 1732 1861 1972 2107 2000 1865 1748 1642 1513 1404 1295 1208 1174 1213 1309 1431 1549 1688 1797 1934 2062 1933 1825 1714 1595 1476 1358 1247 1159 1126 1161 1252 1379 1511 1640 1762 1893 2011 1912 1794 1682 1563 1440 1318 1203 1117 1083 1121 1210 1342 1474 1590 1732 1849 1976 1872 1770 1655 1535 1415 1290 1169 1082 1054 1089 1184 1304 1440 1569 1698 1823 1958 1873 1756 1643 1525 1409 1270 1143 1062 1033 1069 1156 1284 1417 1553 1675 1820 1933 1868 1761 1645 1530 1392 1270 1140 1053 1029 1056 1155 1276 1414 1547 1681 1811 1936 1889 1773 1649 1539 1415 1269 1143 1053 1024 1065 1154 1281 1424 1556 1686 1828 1954 1892 1780 1679 1561 1433 1295 1161 1068 1033 1074 1162 1297 1428 1572 1710 1830 1963 1926 1815 1698 1593 1461 1329 1184 1091 1056 1093 1191 1319 1461 1606 1734 1872 1997 1963 1844 1730 1618 1500 1366 1230 1123 1084 1132 1223 1356 1498 1635 1769 1912 2032 2013 1888 1781 1657 1544 1415 1275 1171 1131 1173 1272 1399 1546 1669 1820 1946 2092 2062 1937 1822 1704 1588 1465 1325 1225 1181 1226 1329 1450 1591 1737 1860 1998 2143 2123 1981 1882 1744 1633 1510 1379 1284 1243 1281 1384 1508 1651 1780 1920 2049 2196 2157 2063 1913 1810 1684 1562 1447 1353 1314 1356 1444 1573 1705 1841 1978 2113 2236 2256 2096 1994 1869 1738 1635 1513 1418 1388 1416 1522 1633 1776 1889 2046 2182 2299]
+            </LSC_SAMPLES_greenR>
+            <LSC_SAMPLES_greenB index="1" type="double" size="[17 17]">
+               [2085 1980 1850 1737 1630 1507 1406 1320 1287 1315 1408 1529 1658 1785 1905 2037 2131 2053 1934 1806 1686 1563 1453 1344 1259 1222 1260 1349 1478 1603 1727 1861 1973 2104 2006 1884 1767 1644 1524 1405 1293 1206 1168 1201 1298 1422 1550 1687 1804 1943 2060 1958 1848 1726 1604 1484 1361 1244 1155 1121 1155 1251 1374 1511 1639 1767 1909 2011 1930 1813 1698 1575 1454 1321 1202 1112 1080 1115 1209 1335 1471 1604 1743 1857 1991 1915 1795 1674 1557 1428 1298 1170 1084 1049 1086 1180 1310 1446 1582 1712 1844 1964 1895 1786 1656 1551 1417 1278 1148 1058 1033 1061 1160 1286 1420 1565 1691 1832 1961 1903 1791 1680 1547 1414 1275 1141 1052 1024 1058 1146 1280 1420 1560 1692 1834 1955 1903 1799 1680 1559 1427 1282 1148 1054 1024 1059 1156 1282 1422 1566 1697 1848 1979 1928 1824 1696 1582 1450 1307 1164 1068 1031 1071 1163 1302 1447 1585 1728 1850 1989 1959 1841 1730 1614 1472 1337 1192 1090 1054 1091 1189 1322 1461 1618 1744 1892 2017 1990 1873 1757 1637 1517 1372 1233 1124 1084 1127 1223 1355 1503 1641 1783 1920 2053 2037 1918 1805 1679 1558 1425 1280 1168 1131 1168 1271 1405 1547 1693 1832 1970 2110 2086 1977 1842 1722 1603 1468 1330 1221 1180 1221 1327 1449 1602 1735 1879 2007 2146 2144 2007 1903 1765 1642 1515 1381 1281 1235 1280 1380 1510 1650 1793 1937 2065 2209 2203 2094 1942 1819 1698 1573 1448 1347 1311 1339 1452 1571 1717 1842 1987 2120 2276 2272 2122 2012 1882 1756 1629 1510 1409 1368 1423 1507 1631 1766 1899 2048 2198 2323]
+            </LSC_SAMPLES_greenB>
+            <LSC_SAMPLES_blue index="1" type="double" size="[17 17]">
+               [2029 1925 1810 1704 1579 1477 1376 1291 1262 1291 1382 1504 1624 1745 1865 1988 2109 2000 1892 1756 1648 1543 1427 1324 1240 1203 1238 1323 1442 1575 1692 1823 1925 2060 1941 1824 1716 1609 1497 1386 1269 1188 1153 1186 1279 1398 1526 1652 1765 1883 2010 1913 1805 1690 1572 1458 1340 1233 1141 1110 1141 1226 1358 1482 1612 1722 1850 1964 1885 1771 1660 1542 1430 1310 1187 1103 1068 1104 1196 1318 1454 1567 1703 1802 1942 1857 1754 1643 1533 1407 1286 1165 1078 1044 1077 1165 1291 1419 1550 1672 1802 1901 1855 1745 1639 1526 1399 1267 1144 1054 1033 1055 1151 1270 1400 1530 1659 1775 1913 1853 1735 1639 1529 1409 1271 1141 1050 1024 1058 1139 1266 1402 1530 1659 1785 1901 1863 1761 1654 1543 1417 1279 1146 1059 1027 1057 1153 1270 1409 1540 1664 1789 1920 1872 1776 1666 1561 1440 1311 1162 1070 1037 1077 1159 1294 1425 1560 1689 1808 1931 1900 1806 1703 1587 1471 1331 1203 1090 1061 1097 1190 1310 1455 1586 1712 1838 1962 1936 1822 1730 1613 1500 1373 1231 1133 1093 1132 1220 1348 1482 1610 1748 1861 2006 1978 1876 1762 1652 1545 1413 1285 1180 1140 1180 1272 1390 1529 1654 1783 1926 2051 2041 1918 1812 1689 1574 1464 1329 1228 1192 1223 1318 1447 1575 1696 1828 1964 2090 2085 1962 1858 1737 1631 1507 1386 1286 1247 1285 1377 1497 1624 1750 1884 2007 2148 2119 2049 1900 1793 1678 1559 1441 1352 1310 1355 1430 1553 1684 1805 1939 2067 2204 2194 2065 1967 1844 1722 1623 1512 1410 1385 1415 1514 1607 1733 1872 1999 2133 2264]
+            </LSC_SAMPLES_blue>
+         </cell>
+         <cell index="3" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 16]">
+               3840x2160_D65_90
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <illumination index="1" type="char" size="[1 3]">
+               D65
+            </illumination>
+            <LSC_sectors index="1" type="double" size="[1 1]">
+               [ 16]
+            </LSC_sectors>
+            <LSC_No index="1" type="double" size="[1 1]">
+               [ 10]
+            </LSC_No>
+            <LSC_Xo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Xo>
+            <LSC_Yo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Yo>
+            <LSC_SECT_SIZE_X index="1" type="double" size="[1 8]">
+               [146 160 185 208 243 286 330 362]
+            </LSC_SECT_SIZE_X>
+            <LSC_SECT_SIZE_Y index="1" type="double" size="[1 8]">
+               [114 120 128 135 140 145 150 148]
+            </LSC_SECT_SIZE_Y>
+            <vignetting index="1" type="double" size="[1 1]">
+               [ 90]
+            </vignetting>
+            <LSC_SAMPLES_red index="1" type="double" size="[17 17]">
+               [2393 2251 2110 1958 1789 1653 1498 1385 1333 1371 1483 1654 1833 1997 2148 2324 2415 2331 2203 2034 1878 1729 1571 1427 1322 1263 1301 1419 1579 1746 1931 2090 2220 2386 2272 2111 1994 1820 1671 1507 1357 1243 1195 1236 1348 1502 1688 1839 2014 2179 2314 2216 2079 1935 1766 1610 1444 1300 1178 1139 1175 1289 1438 1614 1784 1962 2106 2258 2182 2052 1881 1728 1565 1397 1246 1138 1090 1126 1231 1393 1573 1727 1911 2072 2206 2149 2015 1862 1690 1525 1361 1204 1092 1057 1094 1199 1348 1522 1704 1871 2033 2177 2134 1992 1839 1678 1514 1340 1172 1077 1033 1073 1172 1325 1502 1672 1844 2002 2170 2142 1991 1846 1677 1509 1334 1171 1063 1024 1061 1162 1314 1488 1660 1833 2004 2158 2141 2015 1862 1690 1526 1346 1175 1067 1028 1066 1161 1319 1491 1667 1836 2016 2166 2155 2013 1864 1713 1551 1366 1197 1080 1041 1080 1183 1338 1511 1681 1861 2021 2183 2199 2057 1912 1749 1585 1408 1228 1108 1065 1104 1207 1362 1534 1717 1894 2068 2220 2227 2088 1948 1780 1632 1447 1271 1147 1098 1138 1249 1404 1573 1751 1938 2111 2245 2278 2148 1997 1822 1677 1502 1328 1205 1145 1188 1302 1454 1627 1802 1981 2159 2330 2322 2206 2040 1892 1740 1563 1394 1258 1211 1253 1365 1521 1693 1870 2032 2216 2372 2402 2238 2124 1948 1787 1627 1450 1339 1275 1325 1440 1592 1761 1949 2123 2271 2424 2452 2337 2171 2017 1860 1692 1533 1421 1360 1410 1514 1654 1842 2009 2188 2342 2489 2517 2380 2252 2085 1930 1781 1616 1484 1449 1488 1589 1764 1913 2087 2277 2398 2560]
+            </LSC_SAMPLES_red>
+            <LSC_SAMPLES_greenR index="1" type="double" size="[17 17]">
+               [2048 1965 1832 1727 1603 1509 1404 1315 1290 1317 1411 1525 1645 1783 1894 2022 2130 2025 1897 1785 1662 1552 1443 1346 1262 1228 1261 1351 1471 1593 1711 1841 1952 2092 1969 1857 1735 1626 1500 1399 1288 1206 1170 1204 1300 1416 1544 1665 1785 1922 2033 1919 1822 1698 1580 1464 1346 1239 1150 1119 1155 1248 1364 1498 1615 1753 1876 1999 1893 1786 1675 1548 1437 1310 1193 1113 1079 1114 1204 1334 1457 1583 1715 1836 1965 1879 1757 1642 1528 1406 1281 1165 1077 1052 1085 1178 1298 1429 1561 1685 1815 1944 1868 1748 1636 1514 1398 1264 1141 1055 1032 1063 1155 1277 1405 1543 1670 1804 1943 1859 1758 1636 1523 1391 1263 1134 1048 1027 1054 1150 1272 1404 1540 1668 1807 1921 1882 1762 1651 1535 1403 1271 1138 1050 1024 1061 1146 1269 1410 1541 1678 1817 1948 1888 1785 1670 1553 1430 1291 1158 1064 1031 1071 1159 1292 1423 1562 1694 1828 1952 1925 1803 1693 1585 1456 1322 1185 1089 1054 1090 1183 1314 1451 1587 1720 1864 1991 1963 1831 1727 1608 1492 1355 1225 1116 1081 1124 1216 1342 1483 1619 1756 1895 2020 1988 1876 1770 1648 1531 1403 1270 1164 1126 1167 1262 1386 1524 1654 1799 1932 2075 2035 1937 1797 1691 1573 1454 1319 1217 1176 1220 1309 1443 1572 1704 1842 1982 2116 2116 1965 1866 1730 1623 1494 1375 1276 1236 1276 1375 1492 1629 1763 1893 2029 2179 2146 2050 1903 1793 1667 1556 1434 1343 1307 1341 1435 1557 1683 1819 1956 2097 2224 2225 2081 1990 1838 1734 1612 1503 1403 1375 1411 1503 1621 1745 1879 2017 2160 2294]
+            </LSC_SAMPLES_greenR>
+            <LSC_SAMPLES_greenB index="1" type="double" size="[17 17]">
+               [2078 1975 1855 1710 1611 1497 1402 1310 1280 1309 1406 1522 1640 1772 1894 2010 2134 2035 1922 1789 1676 1554 1446 1345 1257 1219 1253 1346 1463 1594 1705 1847 1957 2091 1992 1871 1755 1631 1514 1397 1287 1201 1165 1199 1291 1413 1538 1674 1788 1922 2045 1948 1831 1715 1589 1475 1352 1240 1150 1120 1152 1238 1364 1498 1625 1755 1883 2016 1929 1801 1689 1566 1440 1312 1198 1109 1078 1111 1205 1332 1463 1597 1726 1851 1968 1894 1795 1667 1546 1426 1291 1167 1077 1047 1083 1173 1299 1439 1565 1705 1832 1960 1902 1777 1658 1534 1408 1273 1145 1061 1029 1065 1153 1282 1413 1551 1688 1821 1950 1902 1774 1664 1546 1406 1273 1138 1049 1024 1056 1145 1269 1414 1550 1680 1830 1946 1904 1800 1676 1554 1423 1277 1143 1052 1025 1058 1150 1276 1416 1553 1690 1830 1963 1927 1805 1695 1573 1444 1302 1165 1067 1034 1072 1163 1295 1434 1577 1711 1852 1978 1946 1838 1718 1604 1473 1327 1191 1089 1053 1092 1184 1314 1453 1598 1743 1876 2018 1987 1862 1754 1631 1506 1369 1227 1119 1082 1125 1213 1346 1491 1632 1773 1913 2036 2019 1910 1788 1668 1548 1410 1275 1165 1128 1164 1263 1390 1535 1663 1809 1954 2086 2074 1959 1833 1707 1591 1457 1325 1218 1179 1215 1312 1442 1582 1719 1856 2000 2136 2148 1989 1885 1751 1634 1505 1378 1277 1232 1273 1372 1496 1630 1773 1911 2046 2186 2184 2076 1926 1806 1680 1561 1435 1342 1303 1337 1436 1561 1686 1831 1960 2101 2248 2253 2096 1991 1858 1746 1610 1509 1406 1371 1407 1500 1611 1755 1881 2037 2176 2299]
+            </LSC_SAMPLES_greenB>
+            <LSC_SAMPLES_blue index="1" type="double" size="[17 17]">
+               [2020 1906 1786 1676 1561 1459 1368 1284 1256 1280 1363 1484 1598 1721 1842 1951 2085 1952 1851 1734 1629 1521 1423 1313 1234 1198 1230 1313 1429 1559 1663 1799 1898 2024 1917 1812 1698 1586 1484 1365 1263 1180 1149 1178 1271 1382 1511 1629 1746 1861 1989 1891 1779 1662 1557 1436 1336 1222 1136 1100 1136 1218 1346 1464 1590 1702 1825 1945 1865 1757 1642 1529 1412 1299 1182 1094 1065 1100 1188 1309 1428 1560 1678 1800 1901 1855 1731 1629 1515 1397 1275 1156 1074 1041 1073 1158 1278 1412 1529 1651 1767 1898 1834 1719 1625 1509 1384 1262 1135 1053 1029 1057 1144 1265 1393 1515 1640 1769 1884 1845 1731 1626 1517 1394 1266 1139 1047 1024 1054 1137 1261 1386 1519 1641 1765 1878 1842 1743 1640 1528 1404 1270 1142 1057 1027 1058 1142 1261 1400 1514 1655 1773 1894 1863 1761 1657 1546 1427 1298 1166 1068 1038 1078 1157 1282 1408 1549 1663 1787 1906 1899 1782 1685 1573 1457 1329 1193 1097 1062 1094 1178 1308 1438 1557 1697 1816 1937 1902 1812 1720 1598 1489 1359 1230 1128 1091 1127 1212 1333 1466 1597 1725 1847 1965 1961 1851 1743 1635 1531 1404 1272 1174 1139 1170 1262 1378 1509 1632 1748 1892 2018 1999 1898 1789 1679 1564 1453 1320 1221 1186 1219 1305 1426 1550 1683 1796 1927 2053 2054 1921 1836 1705 1610 1494 1374 1281 1242 1279 1359 1473 1607 1728 1854 1980 2101 2102 2002 1870 1765 1659 1543 1428 1333 1308 1336 1428 1533 1655 1775 1901 2032 2163 2165 2044 1932 1813 1710 1596 1490 1405 1373 1408 1488 1592 1709 1840 1967 2087 2235]
+            </LSC_SAMPLES_blue>
+         </cell>
+         <cell index="4" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 16]">
+               3840x2160_F11_90
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <illumination index="1" type="char" size="[1 3]">
+               F11
+            </illumination>
+            <LSC_sectors index="1" type="double" size="[1 1]">
+               [ 16]
+            </LSC_sectors>
+            <LSC_No index="1" type="double" size="[1 1]">
+               [ 10]
+            </LSC_No>
+            <LSC_Xo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Xo>
+            <LSC_Yo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Yo>
+            <LSC_SECT_SIZE_X index="1" type="double" size="[1 8]">
+               [141 158 185 208 245 284 333 366]
+            </LSC_SECT_SIZE_X>
+            <LSC_SECT_SIZE_Y index="1" type="double" size="[1 8]">
+               [113 119 126 134 142 146 150 150]
+            </LSC_SECT_SIZE_Y>
+            <vignetting index="1" type="double" size="[1 1]">
+               [ 90]
+            </vignetting>
+            <LSC_SAMPLES_red index="1" type="double" size="[17 17]">
+               [2473 2300 2142 1982 1826 1680 1520 1407 1356 1400 1505 1692 1856 2044 2204 2369 2495 2365 2242 2078 1928 1760 1596 1445 1326 1273 1323 1432 1604 1779 1954 2130 2270 2437 2304 2161 2019 1858 1690 1530 1377 1256 1209 1253 1362 1532 1715 1874 2041 2225 2361 2251 2122 1965 1795 1637 1461 1311 1193 1145 1182 1300 1455 1643 1819 1997 2154 2310 2211 2062 1920 1744 1591 1406 1255 1139 1093 1133 1250 1409 1581 1771 1938 2095 2270 2183 2030 1880 1719 1544 1371 1213 1097 1060 1094 1205 1364 1546 1723 1897 2061 2202 2161 2014 1870 1700 1526 1342 1187 1075 1035 1071 1179 1335 1520 1692 1881 2034 2206 2141 2005 1863 1695 1515 1334 1171 1062 1024 1060 1165 1321 1504 1683 1856 2032 2187 2164 2022 1863 1700 1525 1342 1172 1064 1024 1070 1168 1329 1508 1687 1870 2040 2205 2183 2031 1888 1727 1549 1361 1196 1079 1043 1076 1189 1341 1532 1707 1897 2052 2232 2238 2066 1922 1751 1589 1403 1230 1108 1060 1104 1217 1375 1560 1741 1917 2087 2284 2265 2115 1956 1799 1624 1443 1271 1146 1101 1147 1259 1421 1601 1785 1964 2143 2302 2320 2178 2015 1852 1684 1503 1333 1202 1154 1201 1322 1474 1667 1837 2033 2197 2379 2388 2244 2075 1900 1752 1571 1393 1275 1216 1267 1384 1554 1729 1915 2082 2267 2432 2465 2292 2162 1971 1806 1638 1473 1340 1284 1333 1462 1611 1802 1974 2169 2335 2515 2499 2389 2201 2054 1880 1714 1549 1427 1373 1419 1529 1701 1879 2058 2236 2408 2554 2606 2451 2317 2103 1971 1800 1644 1498 1466 1506 1628 1771 1965 2145 2325 2488 2672]
+            </LSC_SAMPLES_red>
+            <LSC_SAMPLES_greenR index="1" type="double" size="[17 17]">
+               [2098 1990 1868 1742 1632 1520 1415 1326 1303 1335 1428 1544 1673 1791 1923 2050 2169 2041 1924 1807 1692 1569 1459 1357 1271 1241 1271 1368 1487 1614 1739 1872 1984 2110 1990 1885 1755 1638 1521 1406 1302 1214 1182 1214 1312 1430 1563 1695 1805 1944 2064 1942 1834 1725 1600 1480 1360 1246 1161 1129 1164 1260 1381 1514 1634 1770 1901 2013 1919 1796 1688 1566 1439 1318 1204 1117 1084 1123 1217 1338 1474 1597 1738 1858 1978 1891 1773 1660 1531 1419 1290 1170 1083 1056 1091 1180 1309 1439 1575 1703 1834 1950 1873 1767 1641 1530 1400 1272 1144 1063 1031 1068 1164 1281 1424 1551 1688 1820 1953 1868 1758 1646 1527 1394 1263 1138 1053 1031 1060 1151 1277 1415 1549 1683 1817 1937 1881 1775 1656 1538 1407 1268 1142 1050 1024 1063 1154 1281 1422 1550 1693 1833 1955 1887 1789 1675 1554 1428 1292 1158 1067 1033 1073 1164 1300 1435 1572 1714 1837 1968 1935 1809 1703 1587 1455 1324 1183 1089 1057 1095 1189 1319 1460 1607 1737 1872 2001 1957 1850 1735 1620 1498 1359 1229 1125 1084 1132 1227 1358 1503 1639 1780 1914 2037 2013 1886 1782 1658 1536 1411 1281 1167 1135 1175 1278 1403 1548 1690 1827 1961 2096 2063 1955 1830 1705 1589 1460 1327 1230 1184 1230 1330 1454 1597 1734 1880 2010 2145 2120 1985 1891 1752 1638 1514 1391 1286 1247 1287 1393 1517 1663 1798 1930 2065 2201 2199 2074 1939 1814 1689 1570 1453 1356 1320 1359 1461 1575 1711 1848 1991 2133 2265 2251 2128 2003 1862 1755 1629 1528 1428 1391 1422 1526 1650 1791 1917 2074 2189 2334]
+            </LSC_SAMPLES_greenR>
+            <LSC_SAMPLES_greenB index="1" type="double" size="[17 17]">
+               [2129 1994 1882 1742 1627 1519 1408 1324 1290 1323 1415 1525 1661 1794 1930 2052 2157 2057 1952 1816 1699 1575 1453 1351 1261 1226 1261 1356 1486 1612 1740 1870 1985 2137 2022 1903 1777 1650 1528 1411 1294 1207 1173 1206 1301 1422 1557 1700 1813 1957 2066 1974 1863 1738 1616 1491 1362 1249 1154 1121 1159 1252 1381 1524 1644 1779 1912 2038 1941 1827 1712 1580 1455 1322 1206 1116 1081 1119 1212 1339 1478 1610 1749 1880 1991 1923 1808 1679 1560 1431 1299 1175 1082 1050 1086 1181 1308 1448 1587 1722 1848 1989 1917 1797 1673 1551 1419 1280 1150 1061 1038 1069 1160 1291 1431 1570 1709 1846 1966 1911 1797 1681 1552 1414 1274 1146 1053 1024 1062 1151 1283 1425 1566 1704 1845 1969 1920 1810 1686 1566 1425 1279 1149 1056 1028 1062 1156 1283 1435 1575 1713 1860 1974 1936 1831 1707 1583 1450 1304 1167 1067 1032 1073 1167 1307 1443 1592 1737 1868 2003 1969 1854 1728 1612 1478 1334 1194 1089 1056 1096 1194 1328 1473 1620 1759 1897 2029 2011 1881 1772 1649 1511 1379 1232 1126 1084 1129 1229 1366 1517 1656 1799 1937 2076 2052 1932 1810 1680 1562 1416 1283 1169 1136 1175 1277 1410 1557 1702 1850 1983 2113 2096 1990 1854 1731 1604 1475 1338 1231 1180 1232 1334 1463 1610 1754 1896 2031 2178 2161 2024 1919 1778 1654 1525 1390 1286 1242 1288 1388 1517 1661 1805 1954 2087 2222 2230 2112 1960 1834 1712 1574 1454 1352 1316 1350 1458 1579 1722 1861 2012 2150 2285 2268 2146 2027 1893 1760 1637 1517 1418 1377 1420 1528 1645 1784 1933 2057 2212 2354]
+            </LSC_SAMPLES_greenB>
+            <LSC_SAMPLES_blue index="1" type="double" size="[17 17]">
+               [2065 1954 1827 1722 1588 1492 1383 1304 1267 1296 1384 1513 1652 1758 1903 2014 2111 2012 1900 1788 1662 1562 1432 1336 1243 1208 1242 1343 1462 1588 1719 1854 1958 2103 1975 1857 1749 1619 1499 1392 1280 1193 1156 1192 1284 1412 1543 1668 1795 1917 2043 1930 1835 1706 1583 1468 1346 1230 1142 1106 1142 1232 1366 1500 1622 1751 1872 2008 1907 1789 1679 1562 1436 1316 1192 1101 1070 1101 1202 1323 1464 1589 1716 1856 1954 1883 1778 1670 1533 1419 1290 1162 1073 1044 1076 1169 1296 1434 1569 1691 1826 1948 1876 1759 1644 1529 1408 1269 1141 1060 1026 1061 1152 1275 1412 1539 1677 1826 1931 1884 1769 1660 1531 1416 1271 1141 1050 1024 1055 1145 1269 1410 1544 1676 1809 1947 1885 1773 1662 1560 1416 1282 1149 1052 1027 1062 1152 1276 1427 1548 1692 1825 1940 1905 1801 1693 1567 1445 1306 1168 1070 1034 1076 1162 1291 1431 1584 1709 1826 1973 1930 1819 1713 1605 1477 1337 1198 1096 1062 1096 1193 1318 1463 1594 1736 1869 1998 1960 1861 1748 1623 1507 1373 1232 1131 1089 1130 1223 1350 1499 1631 1771 1907 2027 2026 1899 1794 1669 1552 1425 1280 1181 1142 1174 1277 1404 1539 1673 1807 1956 2071 2070 1963 1823 1710 1601 1470 1334 1228 1195 1230 1327 1448 1591 1715 1870 1995 2122 2116 1988 1885 1754 1650 1516 1399 1287 1257 1291 1389 1508 1639 1777 1922 2042 2170 2148 2079 1934 1823 1682 1577 1448 1363 1318 1363 1448 1573 1698 1836 1972 2097 2244 2253 2110 1998 1864 1761 1631 1513 1424 1394 1424 1512 1630 1762 1909 2029 2159 2303]
+            </LSC_SAMPLES_blue>
+         </cell>
+         <cell index="5" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 15]">
+               3840x2160_F2_90
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <illumination index="1" type="char" size="[1 2]">
+               F2
+            </illumination>
+            <LSC_sectors index="1" type="double" size="[1 1]">
+               [ 16]
+            </LSC_sectors>
+            <LSC_No index="1" type="double" size="[1 1]">
+               [ 10]
+            </LSC_No>
+            <LSC_Xo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Xo>
+            <LSC_Yo index="1" type="double" size="[1 1]">
+               [ 15]
+            </LSC_Yo>
+            <LSC_SECT_SIZE_X index="1" type="double" size="[1 8]">
+               [142 158 181 208 242 286 335 368]
+            </LSC_SECT_SIZE_X>
+            <LSC_SECT_SIZE_Y index="1" type="double" size="[1 8]">
+               [113 120 125 134 140 147 150 151]
+            </LSC_SECT_SIZE_Y>
+            <vignetting index="1" type="double" size="[1 1]">
+               [ 90]
+            </vignetting>
+            <LSC_SAMPLES_red index="1" type="double" size="[17 17]">
+               [2470 2308 2149 1976 1823 1678 1527 1392 1354 1390 1512 1684 1848 2026 2195 2355 2507 2365 2229 2070 1920 1761 1597 1441 1323 1274 1309 1435 1598 1783 1948 2128 2275 2430 2307 2167 2005 1844 1695 1524 1374 1255 1200 1245 1361 1525 1700 1884 2034 2230 2346 2262 2105 1961 1798 1633 1465 1311 1189 1143 1183 1300 1462 1652 1807 1995 2147 2312 2198 2066 1915 1753 1585 1406 1251 1142 1093 1135 1246 1403 1587 1764 1942 2086 2254 2178 2033 1886 1725 1542 1376 1217 1100 1056 1096 1205 1367 1552 1718 1892 2067 2222 2161 2011 1855 1698 1527 1345 1184 1073 1037 1074 1178 1337 1519 1695 1872 2030 2191 2161 2007 1858 1691 1513 1338 1172 1065 1024 1064 1165 1326 1504 1689 1844 2032 2182 2167 2005 1866 1706 1533 1346 1181 1060 1028 1067 1171 1331 1508 1690 1867 2022 2217 2170 2029 1885 1730 1544 1375 1191 1080 1037 1080 1189 1350 1529 1710 1886 2058 2212 2226 2061 1914 1765 1585 1404 1235 1106 1065 1105 1217 1380 1556 1741 1920 2086 2260 2260 2108 1955 1796 1641 1437 1276 1148 1099 1148 1257 1423 1602 1791 1968 2132 2307 2322 2187 2017 1858 1681 1514 1334 1201 1154 1199 1320 1481 1660 1845 2018 2202 2376 2374 2241 2069 1910 1751 1571 1405 1270 1217 1264 1385 1545 1734 1911 2078 2257 2424 2469 2286 2159 1971 1813 1644 1474 1341 1286 1335 1457 1620 1800 1975 2167 2330 2506 2496 2387 2207 2043 1888 1711 1556 1432 1364 1421 1539 1694 1877 2057 2229 2398 2569 2608 2440 2297 2124 1960 1806 1630 1502 1463 1497 1626 1786 1957 2121 2337 2475 2642]
+            </LSC_SAMPLES_red>
+            <LSC_SAMPLES_greenR index="1" type="double" size="[17 17]">
+               [2080 1962 1860 1735 1627 1509 1417 1327 1297 1332 1421 1544 1662 1798 1917 2035 2175 2025 1915 1792 1679 1560 1460 1351 1263 1233 1270 1360 1481 1611 1729 1860 1969 2099 1984 1870 1746 1637 1516 1396 1300 1207 1176 1211 1307 1424 1553 1680 1803 1937 2055 1929 1826 1711 1591 1471 1362 1246 1157 1121 1161 1258 1381 1507 1636 1764 1895 2015 1910 1791 1686 1557 1445 1316 1201 1114 1078 1121 1211 1335 1469 1592 1737 1853 1974 1870 1770 1651 1538 1409 1290 1166 1081 1053 1087 1179 1309 1437 1570 1697 1819 1957 1870 1751 1638 1521 1402 1265 1145 1058 1030 1067 1160 1284 1417 1549 1689 1811 1935 1866 1758 1645 1523 1394 1268 1137 1048 1025 1054 1148 1275 1406 1545 1671 1812 1932 1876 1766 1642 1534 1409 1268 1140 1047 1024 1061 1153 1276 1417 1553 1688 1821 1941 1886 1782 1669 1551 1425 1288 1156 1063 1029 1071 1164 1301 1431 1570 1708 1832 1965 1916 1809 1694 1584 1456 1326 1182 1087 1053 1094 1186 1320 1459 1608 1733 1866 1996 1956 1842 1731 1613 1494 1361 1229 1119 1086 1124 1229 1354 1495 1639 1771 1907 2030 2001 1896 1776 1655 1536 1412 1272 1169 1130 1174 1275 1402 1545 1682 1827 1947 2089 2067 1938 1819 1709 1586 1459 1332 1224 1182 1225 1326 1454 1600 1736 1864 2011 2137 2130 1983 1881 1746 1640 1507 1381 1285 1241 1286 1385 1513 1652 1784 1925 2053 2195 2165 2069 1920 1809 1692 1568 1447 1354 1315 1350 1456 1572 1717 1845 1983 2116 2255 2264 2100 2001 1868 1747 1630 1516 1419 1382 1424 1522 1649 1772 1907 2052 2191 2328]
+            </LSC_SAMPLES_greenR>
+            <LSC_SAMPLES_greenB index="1" type="double" size="[17 17]">
+               [2092 1991 1862 1743 1616 1508 1412 1314 1279 1311 1417 1524 1661 1790 1924 2042 2141 2066 1933 1808 1692 1572 1456 1345 1256 1216 1260 1347 1479 1598 1732 1857 1972 2115 2011 1887 1767 1649 1521 1407 1291 1200 1165 1200 1295 1425 1552 1687 1806 1953 2067 1956 1850 1733 1607 1481 1362 1246 1155 1116 1158 1246 1376 1513 1640 1774 1899 2028 1938 1817 1707 1578 1458 1323 1200 1110 1077 1111 1212 1344 1473 1600 1745 1864 1997 1920 1796 1676 1554 1428 1295 1175 1079 1050 1086 1176 1309 1443 1588 1714 1839 1974 1893 1789 1666 1544 1419 1282 1145 1061 1029 1065 1157 1291 1425 1567 1702 1835 1962 1906 1796 1675 1549 1413 1273 1143 1052 1026 1056 1153 1280 1423 1565 1692 1833 1967 1913 1802 1683 1562 1429 1283 1147 1051 1024 1059 1151 1289 1431 1566 1715 1843 1977 1930 1822 1695 1580 1446 1305 1164 1068 1035 1069 1169 1306 1439 1593 1725 1862 1986 1963 1844 1729 1611 1475 1338 1188 1090 1052 1093 1191 1323 1474 1619 1758 1895 2024 1998 1875 1764 1643 1515 1374 1228 1123 1084 1127 1230 1364 1507 1657 1801 1929 2067 2041 1930 1805 1680 1560 1419 1284 1168 1131 1172 1275 1411 1554 1696 1838 1976 2115 2108 1980 1847 1729 1603 1475 1330 1229 1176 1227 1331 1462 1611 1748 1883 2027 2171 2149 2017 1916 1774 1652 1523 1384 1280 1244 1281 1390 1512 1666 1804 1952 2077 2216 2216 2101 1948 1827 1699 1577 1451 1348 1304 1349 1450 1579 1722 1858 2003 2134 2283 2261 2146 2024 1891 1763 1642 1513 1417 1389 1411 1527 1632 1783 1913 2061 2215 2338]
+            </LSC_SAMPLES_greenB>
+            <LSC_SAMPLES_blue index="1" type="double" size="[17 17]">
+               [2034 1938 1830 1703 1590 1485 1384 1291 1259 1298 1387 1513 1636 1762 1888 2009 2148 2025 1888 1775 1651 1548 1436 1333 1243 1205 1242 1334 1453 1586 1716 1843 1952 2066 1951 1848 1728 1624 1504 1385 1276 1185 1151 1184 1283 1412 1532 1659 1780 1913 2026 1924 1811 1696 1579 1465 1351 1229 1140 1108 1140 1233 1354 1494 1617 1742 1877 1997 1892 1792 1668 1552 1434 1307 1196 1101 1067 1103 1194 1324 1457 1583 1709 1841 1961 1870 1762 1655 1528 1417 1284 1162 1074 1040 1075 1167 1293 1430 1560 1694 1809 1934 1867 1751 1646 1534 1402 1271 1145 1052 1027 1052 1154 1274 1414 1543 1669 1797 1926 1870 1752 1646 1524 1411 1274 1136 1050 1026 1053 1144 1268 1409 1535 1676 1806 1919 1880 1775 1657 1555 1429 1285 1152 1050 1024 1059 1149 1274 1415 1559 1677 1814 1936 1908 1785 1682 1567 1443 1309 1165 1069 1036 1072 1165 1295 1434 1565 1714 1823 1960 1919 1810 1707 1601 1469 1341 1198 1090 1059 1098 1191 1319 1451 1597 1728 1855 1982 1950 1851 1736 1629 1506 1371 1238 1131 1095 1127 1225 1351 1499 1630 1770 1887 2027 2023 1885 1786 1662 1552 1422 1279 1177 1138 1178 1270 1404 1541 1664 1806 1944 2077 2053 1956 1817 1714 1594 1469 1334 1229 1193 1228 1324 1452 1593 1716 1860 1978 2115 2105 1985 1875 1753 1635 1518 1392 1285 1247 1291 1384 1505 1637 1776 1902 2037 2156 2142 2074 1920 1817 1687 1577 1442 1356 1321 1358 1446 1572 1698 1830 1965 2107 2226 2244 2082 1980 1860 1755 1620 1517 1420 1387 1419 1526 1626 1747 1895 2022 2150 2308]
+            </LSC_SAMPLES_blue>
+         </cell>
+      </LSC>
+      <CC index="1" type="cell" size="[1 5]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 4]">
+               A_90
+            </name>
+            <saturation index="1" type="double" size="[1 1]">
+               [ 90]
+            </saturation>
+            <ccMatrix index="1" type="double" size="[3 3]">
+               [1.87899 -0.421575 -0.451771 -0.432093 1.88176 -0.412427 -0.423795 -1.54908 3.0427]
+            </ccMatrix>
+            <ccOffsets index="1" type="double" size="[1 3]">
+               [-23.1351 -24.0206 -43.3537]
+            </ccOffsets>
+            <wb index="1" type="double" size="[1 4]">
+               [1.20801 1 1 2.198]
+            </wb>
+         </cell>
+         <cell index="2" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 6]">
+               D50_90
+            </name>
+            <saturation index="1" type="double" size="[1 1]">
+               [ 90]
+            </saturation>
+            <ccMatrix index="1" type="double" size="[3 3]">
+               [2.27251 -1.02358 -0.241757 -0.303155 1.83125 -0.521704 -0.133401 -0.813223 1.9811]
+            </ccMatrix>
+            <ccOffsets index="1" type="double" size="[1 3]">
+               [-20.1763 -26.1756 -31.5957]
+            </ccOffsets>
+            <wb index="1" type="double" size="[1 4]">
+               [1.84153 1 1 1.609]
+            </wb>
+         </cell>
+         <cell index="3" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 6]">
+               D65_90
+            </name>
+            <saturation index="1" type="double" size="[1 1]">
+               [ 90]
+            </saturation>
+            <ccMatrix index="1" type="double" size="[3 3]">
+               [2.28045 -0.906833 -0.369215 -0.325811 1.94456 -0.59452 -0.127853 -0.70586 1.8868]
+            </ccMatrix>
+            <ccOffsets index="1" type="double" size="[1 3]">
+               [-18.0154 -17.5202 -31.1898]
+            </ccOffsets>
+            <wb index="1" type="double" size="[1 4]">
+               [1.9504 1 1 1.4604]
+            </wb>
+         </cell>
+         <cell index="4" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 6]">
+               F11_90
+            </name>
+            <saturation index="1" type="double" size="[1 1]">
+               [ 90]
+            </saturation>
+            <ccMatrix index="1" type="double" size="[3 3]">
+               [2.23964 -0.871463 -0.332505 -0.435189 1.76882 -0.327796 -0.223577 -0.971202 2.2787]
+            </ccMatrix>
+            <ccOffsets index="1" type="double" size="[1 3]">
+               [-33.8657 -23.8829 -15.5632]
+            </ccOffsets>
+            <wb index="1" type="double" size="[1 4]">
+               [1.5469 1 1 1.9186]
+            </wb>
+         </cell>
+         <cell index="5" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 5]">
+               F2_90
+            </name>
+            <saturation index="1" type="double" size="[1 1]">
+               [ 90]
+            </saturation>
+            <ccMatrix index="1" type="double" size="[3 3]">
+               [2.51016 -1.06404 -0.442254 -0.511818 1.81781 -0.257583 -0.221554 -0.957586 2.2514]
+            </ccMatrix>
+            <ccOffsets index="1" type="double" size="[1 3]">
+               [-15.829 -23.0549 -41.6949]
+            </ccOffsets>
+            <wb index="1" type="double" size="[1 4]">
+               [1.65285 1 1 2.0208]
+            </wb>
+         </cell>
+      </CC>
+      <AF index="1" type="struct" size="[1 1]">
+         <tbd index="1" type="double" size="[1 1]">
+            [ -1]
+         </tbd>
+      </AF>
+      <AEC index="1" type="struct" size="[1 1]">
+         <SetPoint index="1" type="double" size="[1 1]">
+            [ 80]
+         </SetPoint>
+         <ClmTolerance index="1" type="double" size="[1 1]">
+            [ 20]
+         </ClmTolerance>
+         <DampOver index="1" type="double" size="[1 1]">
+            [ 0.2]
+         </DampOver>
+         <DampUnder index="1" type="double" size="[1 1]">
+            [ 0.3]
+         </DampUnder>
+         <DampOverVideo index="1" type="double" size="[1 1]">
+            [ 0.7]
+         </DampOverVideo>
+         <DampUnderVideo index="1" type="double" size="[1 1]">
+            [ 0.9]
+         </DampUnderVideo>
+         <ECM index="1" type="cell" size="[1 3]">
+            <cell index="1" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 16]">
+                  3840x2160_FPS_15
+               </name>
+               <PrioritySchemes index="1" type="cell" size="[1 3]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 4]">
+                        fast
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 2]
+                     </SlopeA0>
+                  </cell>
+                  <cell index="2" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 6]">
+                        normal
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </SlopeA0>
+                  </cell>
+                  <cell index="3" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 4]">
+                        slow
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 2]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </SlopeA0>
+                  </cell>
+               </PrioritySchemes>
+            </cell>
+            <cell index="2" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 16]">
+                  3840x2160_FPS_10
+               </name>
+               <PrioritySchemes index="1" type="cell" size="[1 3]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 4]">
+                        fast
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 2]
+                     </SlopeA0>
+                  </cell>
+                  <cell index="2" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 6]">
+                        normal
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </SlopeA0>
+                  </cell>
+                  <cell index="3" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 4]">
+                        slow
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 2]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </SlopeA0>
+                  </cell>
+               </PrioritySchemes>
+            </cell>
+            <cell index="3" type="struct" size="[1 1]">
+               <name index="1" type="char" size="[1 16]">
+                  3840x2160_FPS_05
+               </name>
+               <PrioritySchemes index="1" type="cell" size="[1 3]">
+                  <cell index="1" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 4]">
+                        fast
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 1]
+                     </SlopeA0>
+                  </cell>
+                  <cell index="2" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 6]">
+                        normal
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 2]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 0.9]
+                     </SlopeA0>
+                  </cell>
+                  <cell index="3" type="struct" size="[1 1]">
+                     <name index="1" type="char" size="[1 4]">
+                        slow
+                     </name>
+                     <OffsetT0Fac index="1" type="double" size="[1 1]">
+                        [ 4]
+                     </OffsetT0Fac>
+                     <SlopeA0 index="1" type="double" size="[1 1]">
+                        [ 0.9]
+                     </SlopeA0>
+                  </cell>
+               </PrioritySchemes>
+            </cell>
+         </ECM>
+         <aFpsMaxGain index="1" type="double" size="[1 1]">
+            [ 8]
+         </aFpsMaxGain>
+      </AEC>
+      <BLS index="1" type="cell" size="[1 1]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 9]">
+               3840x2160
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <blsData index="1" type="double" size="[1 4]">
+               [42 42 42 42]
+            </blsData>
+         </cell>
+      </BLS>
+      <DEGAMMA index="1" type="cell" size="[1 1]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 6]">
+               linear
+            </name>
+            <degamma_dx index="1" type="double" size="[1 16]">
+               [256 512 768 1024 1280 1536 1792 2048 2304 2560 2816 3072 3328 3584 3840 4096]
+            </degamma_dx>
+            <degamma_y index="1" type="double" size="[1 17]">
+               [0 256 512 768 1024 1280 1536 1792 2048 2304 2560 2816 3072 3328 3584 3840 4095]
+            </degamma_y>
+         </cell>
+      </DEGAMMA>
+      <WDR index="1" type="struct" size="[1 1]">
+         <tbd index="1" type="double" size="[1 1]">
+            [ -1]
+         </tbd>
+         <curve1 index="1" type="struct" size="[1 1]">
+            <xval index="1" type="double" size="[1 33]">
+               [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]
+            </xval>
+            <yval index="1" type="double" size="[1 33]">
+               [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]
+            </yval>
+         </curve1>
+         <curve2 index="1" type="struct" size="[1 1]">
+            <xval index="1" type="double" size="[1 33]">
+               [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]
+            </xval>
+            <yval index="1" type="double" size="[1 33]">
+               [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]
+            </yval>
+         </curve2>
+      </WDR>
+      <CAC index="1" type="cell" size="[1 1]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 9]">
+               3840x2160
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <x_normshift index="1" type="double" size="[1 1]">
+               [ 7]
+            </x_normshift>
+            <x_normfactor index="1" type="double" size="[1 1]">
+               [ 29]
+            </x_normfactor>
+            <y_normshift index="1" type="double" size="[1 1]">
+               [ 7]
+            </y_normshift>
+            <y_normfactor index="1" type="double" size="[1 1]">
+               [ 29]
+            </y_normfactor>
+            <x_offset index="1" type="double" size="[1 1]">
+               [ 0]
+            </x_offset>
+            <y_offset index="1" type="double" size="[1 1]">
+               [ 0]
+            </y_offset>
+            <red_parameters index="1" type="double" size="[1 3]">
+               [-2.375 4.3125 -2.5]
+            </red_parameters>
+            <blue_parameters index="1" type="double" size="[1 3]">
+               [2.4375 -6.4375 4.9375]
+            </blue_parameters>
+         </cell>
+      </CAC>
+      <DPF index="1" type="cell" size="[1 1]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 9]">
+               3840x2160
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <NLL_SEGMENTATION index="1" type="double" size="[1 1]">
+               [ 1]
+            </NLL_SEGMENTATION>
+            <nll_coeff_n index="1" type="double" size="[1 17]">
+               [1023 1023 693 354 268 197 163 142 128 109 96 87 75 66 60 56 52]
+            </nll_coeff_n>
+            <SigmaGreen index="1" type="double" size="[1 1]">
+               [ 4]
+            </SigmaGreen>
+            <SigmaRedBlue index="1" type="double" size="[1 1]">
+               [ 4]
+            </SigmaRedBlue>
+            <Gradient index="1" type="double" size="[1 1]">
+               [ 0.15]
+            </Gradient>
+            <Offset index="1" type="double" size="[1 1]">
+               [ 0]
+            </Offset>
+            <NlGains index="1" type="double" size="[1 4]">
+               [1 1 1 1]
+            </NlGains>
+         </cell>
+      </DPF>
+      <DPCC index="1" type="cell" size="[1 1]">
+         <cell index="1" type="struct" size="[1 1]">
+            <name index="1" type="char" size="[1 9]">
+               3840x2160
+            </name>
+            <resolution index="1" type="char" size="[1 9]">
+               3840x2160
+            </resolution>
+            <register index="1" type="cell" size="[1 23]">
+               <cell index="1" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 13]">
+                     ISP_DPCC_MODE
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0004
+                  </value>
+               </cell>
+               <cell index="2" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_OUT_MODE
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0003
+                  </value>
+               </cell>
+               <cell index="3" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 16]">
+                     ISP_DPCC_SET_USE
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0007
+                  </value>
+               </cell>
+               <cell index="4" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 21]">
+                     ISP_DPCC_METHODS_SET1
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x1D1D
+                  </value>
+               </cell>
+               <cell index="5" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 21]">
+                     ISP_DPCC_METHODS_SET2
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0707
+                  </value>
+               </cell>
+               <cell index="6" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 21]">
+                     ISP_DPCC_METHODS_SET3
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x1F1F
+                  </value>
+               </cell>
+               <cell index="7" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 22]">
+                     ISP_DPCC_LINE_THRESH_1
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0808
+                  </value>
+               </cell>
+               <cell index="8" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 23]">
+                     ISP_DPCC_LINE_MAD_FAC_1
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0404
+                  </value>
+               </cell>
+               <cell index="9" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_PG_FAC_1
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0403
+                  </value>
+               </cell>
+               <cell index="10" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 21]">
+                     ISP_DPCC_RND_THRESH_1
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0A0A
+                  </value>
+               </cell>
+               <cell index="11" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_RG_FAC_1
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x2020
+                  </value>
+               </cell>
+               <cell index="12" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 22]">
+                     ISP_DPCC_LINE_THRESH_2
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x100C
+                  </value>
+               </cell>
+               <cell index="13" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 23]">
+                     ISP_DPCC_LINE_MAD_FAC_2
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x1810
+                  </value>
+               </cell>
+               <cell index="14" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_PG_FAC_2
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0403
+                  </value>
+               </cell>
+               <cell index="15" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 21]">
+                     ISP_DPCC_RND_THRESH_2
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0808
+                  </value>
+               </cell>
+               <cell index="16" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_RG_FAC_2
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0808
+                  </value>
+               </cell>
+               <cell index="17" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 22]">
+                     ISP_DPCC_LINE_THRESH_3
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x2020
+                  </value>
+               </cell>
+               <cell index="18" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 23]">
+                     ISP_DPCC_LINE_MAD_FAC_3
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0404
+                  </value>
+               </cell>
+               <cell index="19" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_PG_FAC_3
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0403
+                  </value>
+               </cell>
+               <cell index="20" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 21]">
+                     ISP_DPCC_RND_THRESH_3
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0806
+                  </value>
+               </cell>
+               <cell index="21" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_RG_FAC_3
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0404
+                  </value>
+               </cell>
+               <cell index="22" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 18]">
+                     ISP_DPCC_RO_LIMITS
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0A0A
+                  </value>
+               </cell>
+               <cell index="23" type="struct" size="[1 1]">
+                  <name index="1" type="char" size="[1 17]">
+                     ISP_DPCC_RND_OFFS
+                  </name>
+                  <value index="1" type="char" size="[1 6]">
+                     0x0FFF
+                  </value>
+               </cell>
+            </register>
+         </cell>
+      </DPCC>
+   </sensor>
+   <system type="struct" size="[1 1]">
+      <AFPS index="1" type="struct" size="[1 1]">
+         <aFpsDefault index="1" type="char" size="[1 2]">
+            on
+         </aFpsDefault>
+      </AFPS>
+   </system>
+
+    <tuning>
+        <ae enable="true" bypass="false">
+            <afps>false</afps>
+            <flicker.period>1</flicker.period>
+            <damping.over>0.2</damping.over>
+            <damping.under>0.30000001</damping.under>
+            <set.point>65</set.point>
+            <tolerance>20</tolerance>
+            <weight>[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]</weight>
+        </ae>
+        <af enable="true">
+            <algorithm oneshot="false">2</algorithm>
+            <mode>2</mode>
+            <position>0</position>
+        </af>
+        <avs/>
+        <awb enable="true">
+            <damping>true</damping>
+            <index>4</index>
+            <mode>2</mode>
+        </awb>
+        <bls bypass="true">
+            <red>64</red>
+            <green.b>64</green.b>
+            <green.r>64</green.r>
+            <blue>64</blue>
+        </bls>
+        <cac enable="true"/>
+        <cnr enable="false">
+            <threshold.tc.1>0</threshold.tc.1>
+            <threshold.tc.2>0</threshold.tc.2>
+        </cnr>
+        <cproc enable="true">
+            <config>AgAAAAIAAAACAAAAAACAP+sAAAAAAIA/AAAAAA==</config>
+        </cproc>
+        <dehaze/>
+        <demosaic enable="true">
+            <threshold>0</threshold>
+        </demosaic>
+        <dewarp enable="false"/>
+        <dnr2/>
+        <dnr3/>
+        <dpcc enable="true"/>
+        <dpf enable="true" adaptive="true">
+            <division.factor>64</division.factor>
+            <gradient>0.15000001</gradient>
+            <minimum.bound>2</minimum.bound>
+            <offset>0</offset>
+            <sigma.green>1</sigma.green>
+            <sigma.red.blue>1</sigma.red.blue>
+        </dpf>
+        <ee/>
+        <filter enable="true" auto="false">
+            <denoise>0</denoise>
+            <sharpen>1</sharpen>
+            <table>{"columns":["HDR","Gain","Integration Time","Denoising","Sharpening"],"rows":[]}</table>
+        </filter>
+        <gc enable="true">
+            <curve>AQAAAAAASQCJALcA3wAfAVQBgwGtAfYBNQJvAtMCKgN4A78D/wMAAA==</curve>
+        </gc>
+        <hdr enable="true">
+            <exposure.ratio>4</exposure.ratio>
+            <extension.bit>0</extension.bit>
+        </hdr>
+        <ie/>
+        <images>
+            <image>
+                <file.name></file.name>
+            </image>
+        </images>
+        <inputs>
+            <input>
+                <type>1</type>
+            </input>
+            <index>0</index>
+        </inputs>
+        <lsc enable="false" adaptive="false"/>
+        <paths>
+            <path index="0">
+                <height>2160</height>
+                <layout>2</layout>
+                <mode>4</mode>
+                <width>3840</width>
+            </path>
+            <path index="1">
+                <height>0</height>
+                <layout>2</layout>
+                <mode>1</mode>
+                <width>0</width>
+            </path>
+            <path index="2">
+                <height>0</height>
+                <layout>2</layout>
+                <mode>1</mode>
+                <width>0</width>
+            </path>
+            <path index="3">
+                <height>0</height>
+                <layout>2</layout>
+                <mode>1</mode>
+                <width>0</width>
+            </path>
+            <path index="4">
+                <height>0</height>
+                <layout>2</layout>
+                <mode>1</mode>
+                <width>0</width>
+            </path>
+        </paths>
+        <sensors>
+            <sensor>
+                <driver.file>ar0830.drv</driver.file>
+                <ec>
+                    <gain>0</gain>
+                    <integration.time>0</integration.time>
+                </ec>
+                <test.pattern>false</test.pattern>
+            </sensor>
+        </sensors>
+        <simp enable="true"/>
+        <wb>
+            <cc.matrix>[1.8049999475479126,-0.53899997472763062,-0.25,-0.47699999809265137,1.7890000343322754,-0.23399999737739563,0.016000000759959221,-0.63300001621246338,1.7339999675750732]</cc.matrix>
+            <cc.offset>
+                <blue>0</blue>
+                <green>0</green>
+                <red>0</red>
+            </cc.offset>
+            <wb.gains>
+                <blue>2.1989999</blue>
+                <green.b>1.016</green.b>
+                <green.r>1.016</green.r>
+                <red>1.887</red>
+            </wb.gains>
+        </wb>
+        <wdr>
+            <v1 enable="true">
+                <d.y>[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]</d.y>
+                <y.m>[0,124,248,372,496,620,744,868,992,1117,1241,1365,1489,1613,1737,1861,1985,2110,2234,2358,2482,2606,2730,2854,2978,3103,3227,3351,3475,3599,3723,3847,3971]</y.m>
+            </v1>
+            <v3 enable="true" auto="true">
+                <auto.level>0</auto.level>
+                <gain.max>16</gain.max>
+                <strength>100</strength>
+                <strength.global>0</strength.global>
+                <table>{"columns":["HDR","Gain","Integration Time","Strength","Max Gain","Global Curve"],"rows":[[0.0,1.0,16.559999999999999,20.0,2.0,0.0],[0.0,2.0,16.559999999999999,80.0,2.0,0.0],[0.0,3.0,16.559999999999999,90.0,2.0,0.0],[0.0,4.0,16.559999999999999,110.0,2.0,0.0],[0.0,40.0,16.559999999999999,128.0,2.0,0.0]]}</table>
+            </v3>
+        </wdr>
+    </tuning>
+   <cli>
+       <ae enable="true" bypass="true">
+           <afps>false</afps>
+           <flicker.period>1</flicker.period>
+           <damping.over>0.40000001</damping.over>
+           <damping.under>0.5</damping.under>
+           <set.point>50</set.point>
+           <tolerance>20</tolerance>
+       </ae>
+       <af enable="true">
+           <algorithm oneshot="true">1</algorithm>
+       </af>
+   </cli>
+
+</matfile>
diff --git a/units/isi/drv/AR0830/calib/CMakeLists.txt b/units/isi/drv/AR0830/calib/CMakeLists.txt
new file mode 100644
index 0000000..9944bca
--- /dev/null
+++ b/units/isi/drv/AR0830/calib/CMakeLists.txt
@@ -0,0 +1,44 @@
+cmake_minimum_required(VERSION 2.6)
+
+# use upper level module name
+
+# get calib data filenames
+file(GLOB_RECURSE calib_files *.xml)
+list(SORT calib_files)
+
+# a nice helper function
+function(add_calib_target ${calib_file})
+    # get calib data file's base name
+    get_filename_component(base_name ${calib_file} NAME_WE)
+
+    # add target to put sensor driver calibration data file into the 'bin' output and create a similar named symlink to the driver as well
+    add_custom_target(${base_name}_calib
+                      ALL
+                      COMMAND ${CMAKE_COMMAND} -E copy ${calib_file} ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/bin/${base_name}.xml
+                      #COMMAND ${CMAKE_COMMAND} -E create_symlink ${module}.drv ${LIB_ROOT}/${CMAKE_BUILD_TYPE}/bin/${base_name}.drv
+                      DEPENDS ${calib_file}
+                      COMMENT "Configuring ${base_name} calibration database"
+                      )
+
+#    add_dependencies(${module}_static
+#                     ${base_name}_calib
+#                     )
+
+    add_dependencies(${module}_shared
+                     ${base_name}_calib
+                     )
+
+    # install the sensor driver config & similar named driver symlink as well, but to 'bin' location!
+    install(FILES       ${calib_file}
+            DESTINATION ${CMAKE_INSTALL_PREFIX}/bin
+            RENAME      ${base_name}.xml
+            )
+    install(CODE "${CMAKE_COMMAND} -E create_symlink ${module}.drv ${CMAKE_INSTALL_PREFIX}/bin/${base_name}.drv")
+endfunction(add_calib_target)
+
+# loop over all calib data files
+foreach(calib_file ${calib_files})
+    add_calib_target(calib_file)
+endforeach(calib_file)
+
+
diff --git a/units/isi/drv/AR0830/include_priv/AR0830_priv.h b/units/isi/drv/AR0830/include_priv/AR0830_priv.h
new file mode 100644
index 0000000..2682117
--- /dev/null
+++ b/units/isi/drv/AR0830/include_priv/AR0830_priv.h
@@ -0,0 +1,246 @@
+/******************************************************************************\
+|* Copyright (c) 2020 by VeriSilicon Holdings Co., Ltd. ("VeriSilicon")       *|
+|* All Rights Reserved.                                                       *|
+|*                                                                            *|
+|* The material in this file is confidential and contains trade secrets of    *|
+|* of VeriSilicon.  This is proprietary information owned or licensed by      *|
+|* VeriSilicon.  No part of this work may be disclosed, reproduced, copied,   *|
+|* transmitted, or used in any way for any purpose, without the express       *|
+|* written permission of VeriSilicon.                                         *|
+|*                                                                            *|
+\******************************************************************************/
+/**
+ * @file AR0830_priv.h
+ *
+ * @brief Interface description for image sensor specific implementation (iss).
+ *
+ *****************************************************************************/
+/**
+ * @page module_name_page Module Name
+ * Describe here what this module does.
+ *
+ * For a detailed list of functions and implementation detail refer to:
+ * - @ref module_name
+ *
+ * @defgroupar0830_priv
+ * @{
+ *
+ */
+#ifndef __AR0830_PRIV_H__
+#define __AR0830_PRIV_H__
+
+#include <ebase/types.h>
+#include <common/return_codes.h>
+#include <hal/hal_api.h>
+#include <isi/isi_common.h>
+#include "vvsensor.h"
+
+
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+
+
+/*****************************************************************************
+ * SC control registers
+ *****************************************************************************/
+#define AR0830_PIDH                         (0x300A)  //R  - Product ID High Byte MSBs
+#define AR0830_PIDL                         (0x300B)  //R  - Product ID Low Byte LSBs
+
+/*****************************************************************************
+ * Default values
+ *****************************************************************************/
+
+ // Make sure that these static settings are reflecting the capabilities defined
+// in IsiGetCapsIss (further dynamic setup may alter these default settings but
+// often does not if there is no choice available).
+
+/*****************************************************************************
+ * SC control registers
+ *****************************************************************************/
+#define AR0830_PIDH_DEFAULT                        (0x27) //read only
+#define AR0830_PIDL_DEFAULT                        (0x70) //read only
+
+typedef struct AR0830_Context_s
+{
+    IsiSensorContext_t  IsiCtx;                 /**< common context of ISI and ISI driver layer; @note: MUST BE FIRST IN DRIVER CONTEXT */
+
+    struct vvcam_mode_info SensorMode;
+    uint32_t            KernelDriverFlag;
+    char                SensorRegCfgFile[64];
+
+    uint32_t              HdrMode;
+    uint32_t              Resolution;
+    uint32_t              MaxFps;
+    uint32_t              MinFps;
+    uint32_t              CurrFps;
+    //// modify below here ////
+
+    IsiSensorConfig_t   Config;                 /**< sensor configuration */
+    bool_t              Configured;             /**< flags that config was applied to sensor */
+    bool_t              Streaming;              /**< flags that csensor is streaming data */
+    bool_t              TestPattern;            /**< flags that sensor is streaming test-pattern */
+
+    bool_t              isAfpsRun;              /**< if true, just do anything required for Afps parameter calculation, but DON'T access SensorHW! */
+
+    float               one_line_exp_time;
+    uint16_t            MaxIntegrationLine;
+    uint16_t            MinIntegrationLine;
+    uint32_t            gain_accuracy;
+
+    uint16_t            FrameLengthLines;       /**< frame line length */
+    uint16_t            CurFrameLengthLines;
+
+    float               AecMinGain;
+    float               AecMaxGain;
+    float               AecMinIntegrationTime;
+    float               AecMaxIntegrationTime;
+
+    float               AecIntegrationTimeIncrement; /**< _smallest_ increment the sensor/driver can handle (e.g. used for sliders in the application) */
+    float               AecGainIncrement;            /**< _smallest_ increment the sensor/driver can handle (e.g. used for sliders in the application) */
+
+    float               AecCurIntegrationTime;
+    float               AecCurVSIntegrationTime;
+    float               AecCurLongIntegrationTime;
+    float               AecCurGain;
+    float               AecCurVSGain;
+    float               AecCurLongGain;
+    // added 02/02
+    uint32_t            LastExpLine;
+    uint32_t            LastVsExpLine;
+    uint32_t            LastLongExpLine;
+
+    uint32_t            LastGain;
+    uint32_t            LastVsGain;
+    uint32_t            LastLongGain;
+
+    bool                GroupHold;
+    uint32_t            OldGain;
+    uint32_t            OldVsGain;
+    uint32_t            OldIntegrationTime;
+    uint32_t            OldVsIntegrationTime;
+    uint32_t            OldGainHcg;
+    uint32_t            OldAGainHcg;
+    uint32_t            OldGainLcg;
+    uint32_t            OldAGainLcg;
+    int                 subdev;
+    // bool                enableHdr;
+    uint8_t             pattern;
+
+    float               CurHdrRatio;
+} AR0830_Context_t;
+
+static RESULT AR0830_IsiCreateSensorIss(IsiSensorInstanceConfig_t *
+                          pConfig);
+
+static RESULT AR0830_IsiInitSensorIss(IsiSensorHandle_t handle);
+
+static RESULT AR0830_IsiReleaseSensorIss(IsiSensorHandle_t handle);
+
+static RESULT AR0830_IsiGetCapsIss(IsiSensorHandle_t handle,
+                         IsiSensorCaps_t * pIsiSensorCaps);
+
+static RESULT AR0830_IsiSetupSensorIss(IsiSensorHandle_t handle,
+                         const IsiSensorConfig_t *
+                         pConfig);
+
+static RESULT AR0830_IsiSensorSetStreamingIss(IsiSensorHandle_t handle,
+                               bool_t on);
+
+static RESULT AR0830_IsiSensorSetPowerIss(IsiSensorHandle_t handle,
+                            bool_t on);
+
+static RESULT AR0830_IsiGetSensorRevisionIss(IsiSensorHandle_t handle,
+                               uint32_t * p_value);
+
+static RESULT AR0830_IsiSetBayerPattern(IsiSensorHandle_t handle,
+                          uint8_t pattern);
+
+static RESULT AR0830_IsiGetGainLimitsIss(IsiSensorHandle_t handle,
+                             float *pMinGain,
+                             float *pMaxGain);
+
+static RESULT AR0830_IsiGetIntegrationTimeLimitsIss(IsiSensorHandle_t
+                                 handle,
+                                 float
+                                 *pMinIntegrationTime,
+                                 float
+                                 *pMaxIntegrationTime);
+
+static RESULT AR0830_IsiExposureControlIss(IsiSensorHandle_t handle,
+                            float NewGain,
+                            float NewIntegrationTime,
+                            uint8_t *
+                            pNumberOfFramesToSkip,
+                            float *pSetGain,
+                            float *pSetIntegrationTime,
+                            float *hdr_ratio);
+
+static RESULT AR0830_IsiGetGainIss(IsiSensorHandle_t handle,
+                        float *pSetGain);
+
+static RESULT AR0830_IsiGetVSGainIss(IsiSensorHandle_t handle,
+                          float *pSetGain);
+
+static RESULT AR0830_IsiGetGainIncrementIss(IsiSensorHandle_t handle,
+                             float *pIncr);
+
+static RESULT AR0830_IsiSetGainIss(IsiSensorHandle_t handle,
+                        float NewGain, float *pSetGain,
+                        float *hdr_ratio);
+
+#if 0
+static RESULT AR0830_IsiSetVSGainIss(IsiSensorHandle_t handle,
+                          float NewIntegrationTime,
+                          float NewGain, float *pSetGain,
+                          float *hdr_ratio);
+#endif
+
+static RESULT AR0830_IsiGetIntegrationTimeIss(IsiSensorHandle_t handle,
+                               float
+                               *pSetIntegrationTime);
+
+static RESULT AR0830_IsiGetVSIntegrationTimeIss(IsiSensorHandle_t
+                             handle,
+                             float
+                             *pSetIntegrationTime);
+
+static RESULT AR0830_IsiGetIntegrationTimeIncrementIss(IsiSensorHandle_t handle,
+                             float *pIncr);
+
+static RESULT AR0830_IsiSetIntegrationTimeIss(IsiSensorHandle_t handle,
+                               float NewIntegrationTime,
+                               float
+                               *pSetIntegrationTime,
+                               uint8_t *
+                               pNumberOfFramesToSkip,
+                               float *hdr_ratio);
+
+#if 0
+static RESULT AR0830_IsiSetVSIntegrationTimeIss(IsiSensorHandle_t
+                             handle,
+                             float
+                             NewIntegrationTime,
+                             float
+                             *pSetIntegrationTime,
+                             uint8_t *
+                             pNumberOfFramesToSkip,
+                             float *hdr_ratio);
+#endif
+
+RESULT AR0830_IsiGetResolutionIss(IsiSensorHandle_t handle, uint16_t *pwidth, uint16_t *pheight);
+
+static RESULT AR0830_IsiResetSensorIss(IsiSensorHandle_t handle);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+/* @}ar0830priv */
+
+#endif    /* __AR0830PRIV_H__ */
+
diff --git a/units/isi/drv/AR0830/source/AR0830.c b/units/isi/drv/AR0830/source/AR0830.c
new file mode 100644
index 0000000..1b3abf2
--- /dev/null
+++ b/units/isi/drv/AR0830/source/AR0830.c
@@ -0,0 +1,1317 @@
+/******************************************************************************\
+|* Copyright (c) 2020 by VeriSilicon Holdings Co., Ltd. ("VeriSilicon")       *|
+|* All Rights Reserved.                                                       *|
+|*                                                                            *|
+|* The material in this file is confidential and contains trade secrets of    *|
+|* of VeriSilicon.  This is proprietary information owned or licensed by      *|
+|* VeriSilicon.  No part of this work may be disclosed, reproduced, copied,   *|
+|* transmitted, or used in any way for any purpose, without the express       *|
+|* written permission of VeriSilicon.                                         *|
+|*                                                                            *|
+\******************************************************************************/
+
+#include <ebase/types.h>
+#include <ebase/trace.h>
+#include <ebase/builtins.h>
+#include <common/return_codes.h>
+#include <common/misc.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include "isi.h"
+#include "isi_iss.h"
+#include "isi_priv.h"
+#include "vvsensor.h"
+
+CREATE_TRACER( AR0830_INFO , "AR0830: ", INFO,    0);
+CREATE_TRACER( AR0830_WARN , "AR0830: ", WARNING, 0);
+CREATE_TRACER( AR0830_ERROR, "AR0830: ", ERROR,   1);
+
+#ifdef SUBDEV_V4L2
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <fcntl.h>
+#include <linux/videodev2.h>
+#include <linux/v4l2-subdev.h>
+#endif
+
+static const char SensorName[16] = "ar0830";
+
+typedef struct AR0830_Context_s
+{
+    IsiSensorContext_t  IsiCtx;
+    struct vvcam_mode_info_s CurMode;
+    IsiSensorAeInfo_t AeInfo;
+    IsiSensorIntTime_t IntTime;
+    uint32_t LongIntLine;
+    uint32_t IntLine;
+    uint32_t ShortIntLine;
+    IsiSensorGain_t SensorGain;
+    uint32_t minAfps;
+    uint64_t AEStartExposure;
+    int motor_fd;
+    uint32_t focus_mode;
+} AR0830_Context_t;
+
+static inline int OpenMotorDevice(const vvcam_lens_t *pfocus_lens)
+{
+    int filep;
+    char szFile[32];
+    struct v4l2_capability caps;
+    for (int i = 0; i < 20; i++) {
+        sprintf(szFile, "/dev/v4l-subdev%d", i);
+        filep = open(szFile, O_RDWR | O_NONBLOCK);
+        if (filep < 0) {
+            continue;
+        }
+
+        if (ioctl(filep, VIDIOC_QUERYCAP, &caps) < 0) {
+            close(filep);
+            continue;
+        }
+
+        if (strcmp((char*) caps.driver, (char*) pfocus_lens->name)
+            || (atoi((char *)caps.bus_info) != pfocus_lens->id)) {
+            close(filep);
+            continue;
+        } else {
+            return filep;
+        }
+    }
+    return -1;
+}
+
+static RESULT AR0830_IsiSensorSetPowerIss(IsiSensorHandle_t handle, bool_t on)
+{
+    int ret = 0;
+
+    TRACE( AR0830_INFO, "%s: (enter)\n", __func__);
+    TRACE( AR0830_INFO, "%s: set power %d\n", __func__,on);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    int32_t power = on;
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_POWER, &power);
+    if (ret != 0){
+        TRACE(AR0830_ERROR, "%s set power %d error\n", __func__,power);
+        return RET_FAILURE;
+    }
+
+    TRACE( AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSensorGetClkIss(IsiSensorHandle_t handle,
+                                        struct vvcam_clk_s *pclk)
+{
+    int ret = 0;
+
+    TRACE( AR0830_INFO, "%s: (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (!pclk)
+        return RET_NULL_POINTER;
+
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_G_CLK, pclk);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s get clock error\n", __func__);
+        return RET_FAILURE;
+    } 
+    
+    TRACE( AR0830_INFO, "%s: status:%d sensor_mclk:%d csi_max_pixel_clk:%d\n",
+        __func__, pclk->status, pclk->sensor_mclk, pclk->csi_max_pixel_clk);
+    TRACE( AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSensorSetClkIss(IsiSensorHandle_t handle,
+                                        struct vvcam_clk_s *pclk)
+{
+    int ret = 0;
+
+    TRACE( AR0830_INFO, "%s: (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (pclk == NULL)
+        return RET_NULL_POINTER;
+    
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_CLK, &pclk);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s set clk error\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE( AR0830_INFO, "%s: status:%d sensor_mclk:%d csi_max_pixel_clk:%d\n",
+        __func__, pclk->status, pclk->sensor_mclk, pclk->csi_max_pixel_clk);
+
+    TRACE( AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiResetSensorIss(IsiSensorHandle_t handle)
+{
+    int ret = 0;
+
+    TRACE( AR0830_INFO, "%s: (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_RESET, NULL);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s set reset error\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE( AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiRegisterReadIss(IsiSensorHandle_t handle,
+                                        const uint32_t address,
+                                        uint32_t * pValue)
+{
+    int32_t ret = 0;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    struct vvcam_sccb_data_s sccb_data;
+    sccb_data.addr = address;
+    sccb_data.data = 0;
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_READ_REG, &sccb_data);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s: read sensor register error!\n", __func__);
+        return (RET_FAILURE);
+    }
+
+    *pValue = sccb_data.data;
+
+    TRACE(AR0830_INFO, "%s (exit) \n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiRegisterWriteIss(IsiSensorHandle_t handle,
+                                        const uint32_t address,
+                                        const uint32_t value)
+{
+    int ret = 0;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    struct vvcam_sccb_data_s sccb_data;
+    sccb_data.addr = address;
+    sccb_data.data = value;
+
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_WRITE_REG, &sccb_data);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s: write sensor register error!\n", __func__);
+        return (RET_FAILURE);
+    }
+
+    TRACE(AR0830_INFO, "%s (exit) \n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_UpdateIsiAEInfo(IsiSensorHandle_t handle)
+{
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    uint32_t exp_line_time = pAR0830Ctx->CurMode.ae_info.one_line_exp_time_ns;
+
+    IsiSensorAeInfo_t *pAeInfo = &pAR0830Ctx->AeInfo;
+    pAeInfo->oneLineExpTime = (exp_line_time << ISI_EXPO_PARAS_FIX_FRACBITS) / 1000;
+
+    if (pAR0830Ctx->CurMode.hdr_mode == SENSOR_MODE_LINEAR) {
+        pAeInfo->maxIntTime.linearInt =
+            pAR0830Ctx->CurMode.ae_info.max_integration_line * pAeInfo->oneLineExpTime;
+        pAeInfo->minIntTime.linearInt =
+            pAR0830Ctx->CurMode.ae_info.min_integration_line * pAeInfo->oneLineExpTime;
+        pAeInfo->maxAGain.linearGainParas = pAR0830Ctx->CurMode.ae_info.max_again;
+        pAeInfo->minAGain.linearGainParas = pAR0830Ctx->CurMode.ae_info.min_again;
+        pAeInfo->maxDGain.linearGainParas = pAR0830Ctx->CurMode.ae_info.max_dgain;
+        pAeInfo->minDGain.linearGainParas = pAR0830Ctx->CurMode.ae_info.min_dgain;
+    } else {
+        switch (pAR0830Ctx->CurMode.stitching_mode) {
+            case SENSOR_STITCHING_DUAL_DCG:
+            case SENSOR_STITCHING_3DOL:
+            case SENSOR_STITCHING_LINEBYLINE:
+                pAeInfo->maxIntTime.triInt.triSIntTime =
+                    pAR0830Ctx->CurMode.ae_info.max_vsintegration_line * pAeInfo->oneLineExpTime;
+                pAeInfo->minIntTime.triInt.triSIntTime =
+                    pAR0830Ctx->CurMode.ae_info.min_vsintegration_line * pAeInfo->oneLineExpTime;
+                
+                pAeInfo->maxIntTime.triInt.triIntTime =
+                    pAR0830Ctx->CurMode.ae_info.max_integration_line * pAeInfo->oneLineExpTime;
+                pAeInfo->minIntTime.triInt.triIntTime =
+                    pAR0830Ctx->CurMode.ae_info.min_integration_line * pAeInfo->oneLineExpTime;
+
+                if (pAR0830Ctx->CurMode.stitching_mode == SENSOR_STITCHING_DUAL_DCG) {
+                    pAeInfo->maxIntTime.triInt.triLIntTime = pAeInfo->maxIntTime.triInt.triIntTime;
+                    pAeInfo->minIntTime.triInt.triLIntTime = pAeInfo->minIntTime.triInt.triIntTime;
+                } else {
+                    pAeInfo->maxIntTime.triInt.triLIntTime =
+                        pAR0830Ctx->CurMode.ae_info.max_longintegration_line * pAeInfo->oneLineExpTime;
+                    pAeInfo->minIntTime.triInt.triLIntTime =
+                        pAR0830Ctx->CurMode.ae_info.min_longintegration_line * pAeInfo->oneLineExpTime;
+                }
+
+                pAeInfo->maxAGain.triGainParas.triSGain = pAR0830Ctx->CurMode.ae_info.max_short_again;
+                pAeInfo->minAGain.triGainParas.triSGain = pAR0830Ctx->CurMode.ae_info.min_short_again;
+                pAeInfo->maxDGain.triGainParas.triSGain = pAR0830Ctx->CurMode.ae_info.max_short_dgain;
+                pAeInfo->minDGain.triGainParas.triSGain = pAR0830Ctx->CurMode.ae_info.min_short_dgain;
+
+                pAeInfo->maxAGain.triGainParas.triGain = pAR0830Ctx->CurMode.ae_info.max_again;
+                pAeInfo->minAGain.triGainParas.triGain = pAR0830Ctx->CurMode.ae_info.min_again;
+                pAeInfo->maxDGain.triGainParas.triGain = pAR0830Ctx->CurMode.ae_info.max_dgain;
+                pAeInfo->minDGain.triGainParas.triGain = pAR0830Ctx->CurMode.ae_info.min_dgain;
+
+                pAeInfo->maxAGain.triGainParas.triLGain = pAR0830Ctx->CurMode.ae_info.max_long_again;
+                pAeInfo->minAGain.triGainParas.triLGain = pAR0830Ctx->CurMode.ae_info.min_long_again;
+                pAeInfo->maxDGain.triGainParas.triLGain = pAR0830Ctx->CurMode.ae_info.max_long_dgain;
+                pAeInfo->minDGain.triGainParas.triLGain = pAR0830Ctx->CurMode.ae_info.min_long_dgain;
+                break;
+            case SENSOR_STITCHING_DUAL_DCG_NOWAIT:
+            case SENSOR_STITCHING_16BIT_COMPRESS:
+            case SENSOR_STITCHING_L_AND_S:
+            case SENSOR_STITCHING_2DOL:
+                pAeInfo->maxIntTime.dualInt.dualIntTime =
+                    pAR0830Ctx->CurMode.ae_info.max_integration_line * pAeInfo->oneLineExpTime;
+                pAeInfo->minIntTime.dualInt.dualIntTime =
+                    pAR0830Ctx->CurMode.ae_info.min_integration_line * pAeInfo->oneLineExpTime;
+
+                if (pAR0830Ctx->CurMode.stitching_mode == SENSOR_STITCHING_DUAL_DCG_NOWAIT) {
+                    pAeInfo->maxIntTime.dualInt.dualSIntTime = pAeInfo->maxIntTime.dualInt.dualIntTime;
+                    pAeInfo->minIntTime.dualInt.dualSIntTime = pAeInfo->minIntTime.dualInt.dualIntTime;
+                } else {
+                    pAeInfo->maxIntTime.dualInt.dualSIntTime =
+                        pAR0830Ctx->CurMode.ae_info.max_vsintegration_line * pAeInfo->oneLineExpTime;
+                    pAeInfo->minIntTime.dualInt.dualSIntTime =
+                        pAR0830Ctx->CurMode.ae_info.min_vsintegration_line * pAeInfo->oneLineExpTime;
+                }
+                
+                if (pAR0830Ctx->CurMode.stitching_mode == SENSOR_STITCHING_DUAL_DCG_NOWAIT) {
+                    pAeInfo->maxAGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.max_again;
+                    pAeInfo->minAGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.min_again;
+                    pAeInfo->maxDGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.max_dgain;
+                    pAeInfo->minDGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.min_dgain;
+                    pAeInfo->maxAGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.max_long_again;
+                    pAeInfo->minAGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.min_long_again;
+                    pAeInfo->maxDGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.max_long_dgain;
+                    pAeInfo->minDGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.min_long_dgain;
+                } else {
+                    pAeInfo->maxAGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.max_short_again;
+                    pAeInfo->minAGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.min_short_again;
+                    pAeInfo->maxDGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.max_short_dgain;
+                    pAeInfo->minDGain.dualGainParas.dualSGain = pAR0830Ctx->CurMode.ae_info.min_short_dgain;
+                    pAeInfo->maxAGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.max_again;
+                    pAeInfo->minAGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.min_again;
+                    pAeInfo->maxDGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.max_dgain;
+                    pAeInfo->minDGain.dualGainParas.dualGain  = pAR0830Ctx->CurMode.ae_info.min_dgain;
+                }
+                
+                break;
+            default:
+                break;
+        }
+    }
+    pAeInfo->gainStep = pAR0830Ctx->CurMode.ae_info.gain_step;
+    pAeInfo->currFps  = pAR0830Ctx->CurMode.ae_info.cur_fps;
+    pAeInfo->maxFps   = pAR0830Ctx->CurMode.ae_info.max_fps;
+    pAeInfo->minFps   = pAR0830Ctx->CurMode.ae_info.min_fps;
+    pAeInfo->minAfps  = pAR0830Ctx->CurMode.ae_info.min_afps;
+    pAeInfo->hdrRatio[0] = pAR0830Ctx->CurMode.ae_info.hdr_ratio.ratio_l_s;
+    pAeInfo->hdrRatio[1] = pAR0830Ctx->CurMode.ae_info.hdr_ratio.ratio_s_vs;
+
+    pAeInfo->intUpdateDlyFrm = pAR0830Ctx->CurMode.ae_info.int_update_delay_frm;
+    pAeInfo->gainUpdateDlyFrm = pAR0830Ctx->CurMode.ae_info.gain_update_delay_frm;
+
+    if (pAR0830Ctx->minAfps != 0) {
+        pAeInfo->minAfps = pAR0830Ctx->minAfps;
+    } 
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiGetSensorModeIss(IsiSensorHandle_t handle,
+                                         IsiSensorMode_t *pMode)
+{
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    if (pMode == NULL)
+        return (RET_NULL_POINTER);
+
+    memcpy(pMode, &pAR0830Ctx->CurMode, sizeof(IsiSensorMode_t));
+
+    TRACE(AR0830_INFO, "%s (exit) \n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSetSensorModeIss(IsiSensorHandle_t handle,
+                                         IsiSensorMode_t *pMode)
+{
+    int ret = 0;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (pMode == NULL)
+        return (RET_NULL_POINTER);
+
+    struct vvcam_mode_info_s sensor_mode;
+    memset(&sensor_mode, 0, sizeof(struct vvcam_mode_info_s));
+    sensor_mode.index = pMode->index;
+
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_SENSOR_MODE, &sensor_mode);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s set sensor mode error\n", __func__);
+        return RET_FAILURE;
+    }
+
+    memset(&sensor_mode, 0, sizeof(struct vvcam_mode_info_s));
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_G_SENSOR_MODE, &sensor_mode);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s set sensor mode failed", __func__);
+        return RET_FAILURE;
+    }
+    memcpy(&pAR0830Ctx->CurMode, &sensor_mode, sizeof(struct vvcam_mode_info_s));
+    AR0830_UpdateIsiAEInfo(handle);
+
+    TRACE(AR0830_INFO, "%s (exit) \n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSensorSetStreamingIss(IsiSensorHandle_t handle,
+                                              bool_t on)
+{
+    int ret = 0;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    uint32_t status = on;
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_STREAM, &status);
+    if (ret != 0){
+        TRACE(AR0830_ERROR, "%s set sensor stream %d error\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s: set streaming %d\n", __func__, on);
+    TRACE(AR0830_INFO, "%s (exit) \n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiCreateSensorIss(IsiSensorInstanceConfig_t * pConfig)
+{
+    RESULT result = RET_SUCCESS;
+    AR0830_Context_t *pAR0830Ctx;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    if (!pConfig || !pConfig->pSensor || !pConfig->HalHandle)
+        return RET_NULL_POINTER;
+
+    pAR0830Ctx = (AR0830_Context_t *) malloc(sizeof(AR0830_Context_t));
+    if (!pAR0830Ctx)
+        return RET_OUTOFMEM;
+
+    memset(pAR0830Ctx, 0, sizeof(AR0830_Context_t));
+    pAR0830Ctx->IsiCtx.HalHandle = pConfig->HalHandle;
+    pAR0830Ctx->IsiCtx.pSensor   = pConfig->pSensor;
+    pConfig->hSensor = (IsiSensorHandle_t) pAR0830Ctx;
+
+    result = AR0830_IsiSensorSetPowerIss(pAR0830Ctx, BOOL_TRUE);
+    if (result != RET_SUCCESS) {
+        TRACE(AR0830_ERROR, "%s set power error\n", __func__);
+        return RET_FAILURE;
+    }
+    struct vvcam_clk_s clk;
+    memset(&clk, 0, sizeof(struct vvcam_clk_s));
+    result = AR0830_IsiSensorGetClkIss(pAR0830Ctx, &clk);
+    if (result != RET_SUCCESS) {
+        TRACE(AR0830_ERROR, "%s get clk error\n", __func__);
+        return RET_FAILURE;
+    }
+    clk.status = 1;
+    result = AR0830_IsiSensorSetClkIss(pAR0830Ctx, &clk);
+    if (result != RET_SUCCESS) {
+        TRACE(AR0830_ERROR, "%s set clk error\n", __func__);
+        return RET_FAILURE;
+    }
+    result = AR0830_IsiResetSensorIss(pAR0830Ctx);
+    if (result != RET_SUCCESS) {
+        TRACE(AR0830_ERROR, "%s retset sensor error\n", __func__);
+        return RET_FAILURE;
+    }
+
+    IsiSensorMode_t SensorMode;
+    SensorMode.index = pConfig->SensorModeIndex;
+    result = AR0830_IsiSetSensorModeIss(pAR0830Ctx, &SensorMode);
+    if (result != RET_SUCCESS) {
+        TRACE(AR0830_ERROR, "%s set sensor mode error\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return result;
+}
+
+static RESULT AR0830_IsiReleaseSensorIss(IsiSensorHandle_t handle)
+{
+    TRACE(AR0830_INFO, "%s (enter) \n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    if (pAR0830Ctx == NULL)
+        return (RET_WRONG_HANDLE);
+
+    AR0830_IsiSensorSetStreamingIss(pAR0830Ctx, BOOL_FALSE);
+    struct vvcam_clk_s clk;
+    memset(&clk, 0, sizeof(struct vvcam_clk_s));
+    AR0830_IsiSensorGetClkIss(pAR0830Ctx, &clk);
+    clk.status = 0;
+    AR0830_IsiSensorSetClkIss(pAR0830Ctx, &clk);
+    AR0830_IsiSensorSetPowerIss(pAR0830Ctx, BOOL_FALSE);
+    free(pAR0830Ctx);
+    pAR0830Ctx = NULL;
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiHalQuerySensorIss(HalHandle_t HalHandle,
+                                          IsiSensorModeInfoArray_t *pSensorMode)
+{
+    int ret = 0;
+
+    TRACE(AR0830_INFO, "%s (enter) \n", __func__);
+
+    if (HalHandle == NULL || pSensorMode == NULL)
+        return RET_NULL_POINTER;
+
+    HalContext_t *pHalCtx = (HalContext_t *)HalHandle;
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_QUERY, pSensorMode);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s: query sensor mode info error!\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiQuerySensorIss(IsiSensorHandle_t handle,
+                                       IsiSensorModeInfoArray_t *pSensorMode)
+{
+    RESULT result = RET_SUCCESS;
+
+    TRACE(AR0830_INFO, "%s (enter) \n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    result = AR0830_IsiHalQuerySensorIss(pAR0830Ctx->IsiCtx.HalHandle,
+                                         pSensorMode);
+    if (result != RET_SUCCESS)
+        TRACE(AR0830_ERROR, "%s: query sensor mode info error!\n", __func__);
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return result;
+}
+
+static RESULT AR0830_IsiGetCapsIss(IsiSensorHandle_t handle,
+                                   IsiSensorCaps_t * pIsiSensorCaps)
+{
+    RESULT result = RET_SUCCESS;
+
+    TRACE(AR0830_INFO, "%s (enter) \n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    if (pIsiSensorCaps == NULL)
+        return RET_NULL_POINTER;
+
+    IsiSensorModeInfoArray_t SensorModeInfo;
+    memset(&SensorModeInfo, 0, sizeof(IsiSensorModeInfoArray_t));
+    result = AR0830_IsiQuerySensorIss(handle, &SensorModeInfo);
+    if (result != RET_SUCCESS) {
+        TRACE(AR0830_ERROR, "%s: query sensor mode info error!\n", __func__);
+        return RET_FAILURE;
+    }
+
+    pIsiSensorCaps->FieldSelection    = ISI_FIELDSEL_BOTH;
+    pIsiSensorCaps->YCSequence        = ISI_YCSEQ_YCBYCR;
+    pIsiSensorCaps->Conv422           = ISI_CONV422_NOCOSITED;
+    pIsiSensorCaps->HPol              = ISI_HPOL_REFPOS;
+    pIsiSensorCaps->VPol              = ISI_VPOL_NEG;
+    pIsiSensorCaps->Edge              = ISI_EDGE_RISING;
+    pIsiSensorCaps->supportModeNum    = SensorModeInfo.count;
+    pIsiSensorCaps->currentMode       = pAR0830Ctx->CurMode.index;
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return result;
+}
+
+static RESULT AR0830_IsiSetupSensorIss(IsiSensorHandle_t handle,
+                                       const IsiSensorCaps_t *pIsiSensorCaps )
+{
+    int ret = 0;
+    RESULT result = RET_SUCCESS;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (pIsiSensorCaps == NULL)
+        return RET_NULL_POINTER;
+
+    if (pIsiSensorCaps->currentMode != pAR0830Ctx->CurMode.index) {
+        IsiSensorMode_t SensorMode;
+        memset(&SensorMode, 0, sizeof(IsiSensorMode_t));
+        SensorMode.index = pIsiSensorCaps->currentMode;
+        result = AR0830_IsiSetSensorModeIss(handle, &SensorMode);
+        if (result != RET_SUCCESS) {
+            TRACE(AR0830_ERROR, "%s:set sensor mode %d failed!\n",
+                  __func__, SensorMode.index);
+            return result;
+        }
+    }
+
+#ifdef SUBDEV_V4L2
+    struct v4l2_subdev_format format;
+    memset(&format, 0, sizeof(struct v4l2_subdev_format));
+    format.format.width  = pAR0830Ctx->CurMode.size.bounds_width;
+    format.format.height = pAR0830Ctx->CurMode.size.bounds_height;
+    format.which = V4L2_SUBDEV_FORMAT_ACTIVE;
+    format.pad = 0;
+    ret = ioctl(pHalCtx->sensor_fd, VIDIOC_SUBDEV_S_FMT, &format);
+    if (ret != 0){
+        TRACE(AR0830_ERROR, "%s: sensor set format error!\n", __func__);
+        return RET_FAILURE;
+    }
+#else
+    ret = ioctrl(pHalCtx->sensor_fd, VVSENSORIOC_S_INIT, NULL);
+    if (ret != 0){
+        TRACE(AR0830_ERROR, "%s: sensor init error!\n", __func__);
+        return RET_FAILURE;
+    }
+#endif
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiGetSensorRevisionIss(IsiSensorHandle_t handle, uint32_t *pValue)
+{
+    int ret = 0;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (pValue == NULL)
+        return RET_NULL_POINTER;
+
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_G_CHIP_ID, pValue);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s: get chip id error!\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiCheckSensorConnectionIss(IsiSensorHandle_t handle)
+{
+    RESULT result = RET_SUCCESS;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    uint32_t ChipId = 0;
+    result = AR0830_IsiGetSensorRevisionIss(handle, &ChipId);
+    if (result != RET_SUCCESS) {
+        TRACE(AR0830_ERROR, "%s:get sensor chip id error!\n",__func__);
+        return RET_FAILURE;
+    }
+
+    if (ChipId != 0x2770) {
+        TRACE(AR0830_ERROR,
+            "%s:ChipID=0x2770,while read sensor Id=0x%x error!\n",
+             __func__, ChipId);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiGetAeInfoIss(IsiSensorHandle_t handle,
+                                     IsiSensorAeInfo_t *pAeInfo)
+{
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    if (pAeInfo == NULL)
+        return RET_NULL_POINTER;
+
+    memcpy(pAeInfo, &pAR0830Ctx->AeInfo, sizeof(IsiSensorAeInfo_t));
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiGetIntegrationTimeIss(IsiSensorHandle_t handle,
+                                   IsiSensorIntTime_t *pIntegrationTime)
+{
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    memcpy(pIntegrationTime, &pAR0830Ctx->IntTime, sizeof(IsiSensorIntTime_t));
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+
+}
+
+static RESULT AR0830_IsiSetIntegrationTimeIss(IsiSensorHandle_t handle,
+                                   IsiSensorIntTime_t *pIntegrationTime)
+{
+    int ret = 0;
+    uint32_t LongIntLine;
+    uint32_t IntLine;
+    uint32_t ShortIntLine;
+    uint32_t oneLineTime;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (pIntegrationTime == NULL)
+        return RET_NULL_POINTER;
+
+    oneLineTime =  pAR0830Ctx->AeInfo.oneLineExpTime;
+    pAR0830Ctx->IntTime.expoFrmType = pIntegrationTime->expoFrmType;
+
+    switch (pIntegrationTime->expoFrmType) {
+        case ISI_EXPO_FRAME_TYPE_1FRAME:
+            IntLine = (pIntegrationTime->IntegrationTime.linearInt +
+                       (oneLineTime / 2)) / oneLineTime;
+            if (IntLine != pAR0830Ctx->IntLine) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_EXP, &IntLine);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor linear exp error!\n", __func__);
+                    return RET_FAILURE;
+                }
+               pAR0830Ctx->IntLine = IntLine;
+            }
+            TRACE(AR0830_INFO, "%s set linear exp %d \n", __func__,IntLine);
+            pAR0830Ctx->IntTime.IntegrationTime.linearInt =  IntLine * oneLineTime;
+            break;
+        case ISI_EXPO_FRAME_TYPE_2FRAMES:
+            IntLine = (pIntegrationTime->IntegrationTime.dualInt.dualIntTime +
+                       (oneLineTime / 2)) / oneLineTime;
+            if (IntLine != pAR0830Ctx->IntLine) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_EXP, &IntLine);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor dual exp error!\n", __func__);
+                    return RET_FAILURE;
+                }
+                pAR0830Ctx->IntLine = IntLine;
+            }
+
+            if (pAR0830Ctx->CurMode.stitching_mode != SENSOR_STITCHING_DUAL_DCG_NOWAIT) {
+                ShortIntLine = (pIntegrationTime->IntegrationTime.dualInt.dualSIntTime +
+                               (oneLineTime / 2)) / oneLineTime;
+                if (ShortIntLine != pAR0830Ctx->ShortIntLine) {
+                    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_VSEXP, &ShortIntLine);
+                    if (ret != 0) {
+                        TRACE(AR0830_ERROR,"%s:set sensor dual vsexp error!\n", __func__);
+                        return RET_FAILURE;
+                    }
+                    pAR0830Ctx->ShortIntLine = ShortIntLine;
+                }
+            } else {
+                ShortIntLine = IntLine;
+                pAR0830Ctx->ShortIntLine = ShortIntLine;
+            }
+            TRACE(AR0830_INFO, "%s set dual exp %d short_exp %d\n", __func__, IntLine, ShortIntLine);
+            pAR0830Ctx->IntTime.IntegrationTime.dualInt.dualIntTime  = IntLine * oneLineTime;
+            pAR0830Ctx->IntTime.IntegrationTime.dualInt.dualSIntTime = ShortIntLine * oneLineTime;
+            break;
+        case ISI_EXPO_FRAME_TYPE_3FRAMES:
+            if (pAR0830Ctx->CurMode.stitching_mode != SENSOR_STITCHING_DUAL_DCG_NOWAIT) {
+                LongIntLine = (pIntegrationTime->IntegrationTime.triInt.triLIntTime +
+                        (oneLineTime / 2)) / oneLineTime;
+                if (LongIntLine != pAR0830Ctx->LongIntLine) {
+                    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_LONG_EXP, &LongIntLine);
+                    if (ret != 0) {
+                        TRACE(AR0830_ERROR,"%s:set sensor tri lexp error!\n", __func__);
+                        return RET_FAILURE;
+                    }
+                    pAR0830Ctx->LongIntLine = LongIntLine;
+                }
+            } else {
+                LongIntLine = (pIntegrationTime->IntegrationTime.triInt.triIntTime +
+                       (oneLineTime / 2)) / oneLineTime;
+                pAR0830Ctx->LongIntLine = LongIntLine;
+            }
+
+            IntLine = (pIntegrationTime->IntegrationTime.triInt.triIntTime +
+                       (oneLineTime / 2)) / oneLineTime;
+            if (IntLine != pAR0830Ctx->IntLine) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_EXP, &IntLine);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor tri exp error!\n", __func__);
+                    return RET_FAILURE;
+                }
+                pAR0830Ctx->IntLine = IntLine;
+            }
+            
+            ShortIntLine = (pIntegrationTime->IntegrationTime.triInt.triSIntTime +
+                       (oneLineTime / 2)) / oneLineTime;
+            if (ShortIntLine != pAR0830Ctx->ShortIntLine) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_VSEXP, &ShortIntLine);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor tri vsexp error!\n", __func__);
+                    return RET_FAILURE;
+                }
+                pAR0830Ctx->ShortIntLine = ShortIntLine;
+            }
+            TRACE(AR0830_INFO, "%s set tri long exp %d exp %d short_exp %d\n", __func__, LongIntLine, IntLine, ShortIntLine);
+            pAR0830Ctx->IntTime.IntegrationTime.triInt.triLIntTime = LongIntLine * oneLineTime;
+            pAR0830Ctx->IntTime.IntegrationTime.triInt.triIntTime = IntLine * oneLineTime;
+            pAR0830Ctx->IntTime.IntegrationTime.triInt.triSIntTime = ShortIntLine * oneLineTime;
+            break;
+        default:
+            return RET_FAILURE;
+            break;
+    }
+    
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiGetGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pGain)
+{
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    if (pGain == NULL)
+        return RET_NULL_POINTER;
+    memcpy(pGain, &pAR0830Ctx->SensorGain, sizeof(IsiSensorGain_t));
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSetGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pGain)
+{
+    int ret = 0;
+    uint32_t LongGain;
+    uint32_t Gain;
+    uint32_t ShortGain;
+
+    TRACE(AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (pGain == NULL)
+        return RET_NULL_POINTER;
+
+    pAR0830Ctx->SensorGain.expoFrmType = pGain->expoFrmType;
+    switch (pGain->expoFrmType) {
+        case ISI_EXPO_FRAME_TYPE_1FRAME:
+            Gain = pGain->gain.linearGainParas;
+            if (pAR0830Ctx->SensorGain.gain.linearGainParas != Gain) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_GAIN, &Gain);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor linear gain error!\n", __func__);
+                    return RET_FAILURE;
+                }
+            }
+            pAR0830Ctx->SensorGain.gain.linearGainParas = pGain->gain.linearGainParas;
+            TRACE(AR0830_INFO, "%s set linear gain %d\n", __func__,pGain->gain.linearGainParas);
+            break;
+        case ISI_EXPO_FRAME_TYPE_2FRAMES:
+            Gain = pGain->gain.dualGainParas.dualGain;
+            if (pAR0830Ctx->SensorGain.gain.dualGainParas.dualGain != Gain) {
+                if (pAR0830Ctx->CurMode.stitching_mode != SENSOR_STITCHING_DUAL_DCG_NOWAIT) {
+                    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_GAIN, &Gain);
+                } else {
+                    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_LONG_GAIN, &Gain);
+                }
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor dual gain error!\n", __func__);
+                    return RET_FAILURE;
+                }
+            }
+
+            ShortGain = pGain->gain.dualGainParas.dualSGain;
+            if (pAR0830Ctx->SensorGain.gain.dualGainParas.dualSGain != ShortGain) {
+                if (pAR0830Ctx->CurMode.stitching_mode != SENSOR_STITCHING_DUAL_DCG_NOWAIT) {
+                    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_VSGAIN, &ShortGain);
+                } else {
+                    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_GAIN, &ShortGain);
+                }
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor dual vs gain error!\n", __func__);
+                    return RET_FAILURE;
+                }
+            }
+            TRACE(AR0830_INFO,"%s:set gain%d short gain %d!\n", __func__,Gain,ShortGain);
+            pAR0830Ctx->SensorGain.gain.dualGainParas.dualGain = Gain;
+            pAR0830Ctx->SensorGain.gain.dualGainParas.dualSGain = ShortGain;
+            break;
+        case ISI_EXPO_FRAME_TYPE_3FRAMES:
+            LongGain = pGain->gain.triGainParas.triLGain;
+            if (pAR0830Ctx->SensorGain.gain.triGainParas.triLGain != LongGain) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_LONG_GAIN, &LongGain);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor tri gain error!\n", __func__);
+                    return RET_FAILURE;
+                }
+            }
+            Gain = pGain->gain.triGainParas.triGain;
+            if (pAR0830Ctx->SensorGain.gain.triGainParas.triGain != Gain) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_GAIN, &Gain);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor tri gain error!\n", __func__);
+                    return RET_FAILURE;
+                }
+            }
+
+            ShortGain = pGain->gain.triGainParas.triSGain;
+            if (pAR0830Ctx->SensorGain.gain.triGainParas.triSGain != ShortGain) {
+                ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_VSGAIN, &ShortGain);
+                if (ret != 0) {
+                    TRACE(AR0830_ERROR,"%s:set sensor tri vs gain error!\n", __func__);
+                    return RET_FAILURE;
+                }
+            }
+            TRACE(AR0830_INFO,"%s:set long gain %d gain%d short gain %d!\n", __func__, LongGain, Gain, ShortGain);
+            pAR0830Ctx->SensorGain.gain.triGainParas.triLGain = LongGain;
+            pAR0830Ctx->SensorGain.gain.triGainParas.triGain = Gain;
+            pAR0830Ctx->SensorGain.gain.triGainParas.triSGain = ShortGain;
+            break;
+        default:
+            return RET_FAILURE;
+            break;
+    }
+
+    TRACE(AR0830_INFO, "%s (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+
+static RESULT AR0830_IsiGetSensorFpsIss(IsiSensorHandle_t handle, uint32_t * pfps)
+{
+    TRACE(AR0830_INFO, "%s: (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    if (pfps == NULL)
+        return RET_NULL_POINTER;
+
+    *pfps = pAR0830Ctx->CurMode.ae_info.cur_fps;
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSetSensorFpsIss(IsiSensorHandle_t handle, uint32_t fps)
+{
+    int ret = 0;
+
+    TRACE(AR0830_INFO, "%s: (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_FPS, &fps);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR,"%s:set sensor fps error!\n", __func__);
+        return RET_FAILURE;
+    }
+    struct vvcam_mode_info_s SensorMode;
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_G_SENSOR_MODE, &SensorMode);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR,"%s:get sensor mode error!\n", __func__);
+        return RET_FAILURE;
+    }
+    memcpy(&pAR0830Ctx->CurMode, &SensorMode, sizeof(struct vvcam_mode_info_s));
+    AR0830_UpdateIsiAEInfo(handle);
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+static RESULT AR0830_IsiSetSensorAfpsLimitsIss(IsiSensorHandle_t handle, uint32_t minAfps)
+{
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    TRACE(AR0830_INFO, "%s: (enter)\n", __func__);
+
+    if ((minAfps > pAR0830Ctx->CurMode.ae_info.max_fps) ||
+        (minAfps < pAR0830Ctx->CurMode.ae_info.min_fps))
+        return RET_FAILURE;
+    pAR0830Ctx->minAfps = minAfps;
+    pAR0830Ctx->CurMode.ae_info.min_afps = minAfps;
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiGetSensorIspStatusIss(IsiSensorHandle_t handle,
+                               IsiSensorIspStatus_t *pSensorIspStatus)
+{
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    TRACE(AR0830_INFO, "%s: (enter)\n", __func__);
+
+    if (pAR0830Ctx->CurMode.hdr_mode == SENSOR_MODE_HDR_NATIVE) {
+        pSensorIspStatus->useSensorAWB = true;
+        pSensorIspStatus->useSensorBLC = true;
+    } else {
+        pSensorIspStatus->useSensorAWB = false;
+        pSensorIspStatus->useSensorBLC = false;
+    }
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+#ifndef ISI_LITE
+static RESULT AR0830_IsiSensorSetWBIss(IsiSensorHandle_t handle, IsiSensorWB_t *pWb)
+{
+    int32_t ret = 0;
+
+    TRACE(AR0830_INFO, "%s: (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    if (pWb == NULL)
+        return RET_NULL_POINTER;
+
+    struct sensor_white_balance_s SensorWb;
+    SensorWb.r_gain = pWb->r_gain;
+    SensorWb.gr_gain = pWb->gr_gain;
+    SensorWb.gb_gain = pWb->gb_gain;
+    SensorWb.b_gain = pWb->b_gain;
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_WB, &SensorWb);
+    if (ret != 0) {
+        TRACE(AR0830_ERROR, "%s: set wb error\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSetTestPatternIss(IsiSensorHandle_t handle,
+                                       IsiSensorTpgMode_e  tpgMode)
+{
+    int32_t ret = 0;
+
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+
+    struct sensor_test_pattern_s TestPattern;
+    if (tpgMode == ISI_TPG_DISABLE) {
+        TestPattern.enable = 0;
+        TestPattern.pattern = 0;
+    } else {
+        TestPattern.enable = 1;
+        TestPattern.pattern = (uint32_t)tpgMode - 1;
+    }
+
+    ret = ioctl(pHalCtx->sensor_fd, VVSENSORIOC_S_TEST_PATTERN, &TestPattern);
+    if (ret != 0)
+    {
+        TRACE(AR0830_ERROR, "%s: set test pattern %d error\n", __func__, tpgMode);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s: test pattern enable[%d] mode[%d]\n", __func__, TestPattern.enable, TestPattern.pattern);
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiFocusSetupIss(IsiSensorHandle_t handle)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+    
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    HalContext_t *pHalCtx = (HalContext_t *) pAR0830Ctx->IsiCtx.HalHandle;
+    vvcam_lens_t pfocus_lens;
+
+    if (ioctl(pHalCtx->sensor_fd, VVSENSORIOC_G_LENS, &pfocus_lens) < 0) {
+        TRACE(AR0830_ERROR, "%s  sensor do not have focus-lens \n", __func__);
+        return RET_NOTSUPP;
+    }
+
+    if (pAR0830Ctx->motor_fd <= 0) {
+        pAR0830Ctx->motor_fd = OpenMotorDevice(&pfocus_lens);
+        if (pAR0830Ctx->motor_fd < 0) {
+            TRACE(AR0830_ERROR, "%s open sensor focus-lens fail\n", __func__);
+            return RET_FAILURE;
+        }
+    } else {
+        TRACE(AR0830_INFO, "%s sensor focus-lens already open\n", __func__);
+    }
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiFocusReleaseIss(IsiSensorHandle_t handle)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    if (pAR0830Ctx->motor_fd <= 0) {
+        return RET_NOTSUPP;
+    }
+
+    if (close(pAR0830Ctx->motor_fd) < 0) {
+        TRACE(AR0830_ERROR,"%s close motor device failed\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiFocusGetIss(IsiSensorHandle_t handle, IsiFocusPos_t *pPos)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+
+    struct v4l2_control ctrl;
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    
+    if (pAR0830Ctx->motor_fd <= 0) {
+        return RET_NOTSUPP;
+    }
+
+    memset(&ctrl, 0, sizeof(ctrl));
+    if (pAR0830Ctx->focus_mode & (1 << (pPos->mode))) {
+        if (pPos->mode == ISI_FOUCUS_MODE_ABSOLUTE) {
+            ctrl.id = V4L2_CID_FOCUS_ABSOLUTE;
+        } else if (pPos->mode == ISI_FOUCUS_MODE_RELATIVE) {
+            ctrl.id = V4L2_CID_FOCUS_RELATIVE;
+        }
+    } else {
+        TRACE(AR0830_ERROR, "%s invalid Focus mode %d\n", __func__, pPos->mode);
+        return RET_FAILURE;
+    }
+
+    if (ioctl(pAR0830Ctx->motor_fd, VIDIOC_G_CTRL, &ctrl) < 0) {
+        TRACE(AR0830_ERROR, "%s get moto pos failed\n", __func__);
+        return RET_FAILURE;
+    }
+
+    pPos->Pos = ctrl.value;
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiFocusSetIss(IsiSensorHandle_t handle, IsiFocusPos_t *pPos)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+
+    struct v4l2_control ctrl;
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    if (pAR0830Ctx->motor_fd <= 0) {
+        return RET_NOTSUPP;
+    }
+
+    memset(&ctrl, 0, sizeof(ctrl));
+    if (pAR0830Ctx->focus_mode & (1 << (pPos->mode))) {
+        if (pPos->mode == ISI_FOUCUS_MODE_ABSOLUTE) {
+            ctrl.id = V4L2_CID_FOCUS_ABSOLUTE;
+            ctrl.value = pPos->Pos;
+        } else if (pPos->mode == ISI_FOUCUS_MODE_RELATIVE) {
+            ctrl.id = V4L2_CID_FOCUS_RELATIVE;
+            ctrl.value = pPos->Pos;
+        }
+    } else {
+        TRACE(AR0830_ERROR, "%s invalid Focus mode %d\n", __func__, pPos->mode);
+        return RET_FAILURE;
+    }
+
+    if (ioctl(pAR0830Ctx->motor_fd, VIDIOC_S_CTRL, &ctrl) < 0) {
+        TRACE(AR0830_ERROR, "%s set moto pos failed\n", __func__);
+        return RET_FAILURE;
+    }
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiGetFocusCalibrateIss(IsiSensorHandle_t handle, IsiFoucsCalibAttr_t *pFocusCalib)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+    struct v4l2_queryctrl qctrl;
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+    RESULT result = RET_SUCCESS;
+
+    if (pAR0830Ctx->motor_fd <= 0) {
+        return RET_NOTSUPP;
+    }
+
+    memset(&qctrl, 0, sizeof(qctrl));
+    qctrl.id = V4L2_CID_FOCUS_ABSOLUTE;
+    if (ioctl(pAR0830Ctx->motor_fd, VIDIOC_QUERYCTRL, &qctrl) >= 0) {
+            pAR0830Ctx->focus_mode |= 1 << ISI_FOUCUS_MODE_ABSOLUTE;
+            pFocusCalib->minPos = qctrl.minimum;
+            pFocusCalib->maxPos = qctrl.maximum;
+            pFocusCalib->minStep = qctrl.step;
+    } else {
+        qctrl.id = V4L2_CID_FOCUS_RELATIVE;
+        if (ioctl(pAR0830Ctx->motor_fd, VIDIOC_QUERYCTRL, &qctrl) >= 0) {
+                pAR0830Ctx->focus_mode |= 1 << ISI_FOUCUS_MODE_RELATIVE;
+                pFocusCalib->minPos = qctrl.minimum;
+                pFocusCalib->maxPos = qctrl.maximum;
+                pFocusCalib->minStep = qctrl.step;
+        } else {
+            result = RET_FAILURE;
+        }
+    }
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+    return result;
+}
+
+static RESULT AR0830_IsiGetAeStartExposureIs(IsiSensorHandle_t handle, uint64_t *pExposure)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    if (pAR0830Ctx->AEStartExposure == 0) {
+        pAR0830Ctx->AEStartExposure =
+            (uint64_t)pAR0830Ctx->CurMode.ae_info.start_exposure *
+            pAR0830Ctx->CurMode.ae_info.one_line_exp_time_ns / 1000;
+           
+    }
+    *pExposure =  pAR0830Ctx->AEStartExposure;
+    TRACE(AR0830_INFO, "%s:get start exposure %d\n", __func__, pAR0830Ctx->AEStartExposure);
+
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+    return RET_SUCCESS;
+}
+
+static RESULT AR0830_IsiSetAeStartExposureIs(IsiSensorHandle_t handle, uint64_t exposure)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+    AR0830_Context_t *pAR0830Ctx = (AR0830_Context_t *) handle;
+
+    pAR0830Ctx->AEStartExposure = exposure;
+    TRACE(AR0830_INFO, "set start exposure %d\n", __func__,pAR0830Ctx->AEStartExposure);
+    TRACE(AR0830_INFO, "%s: (exit)\n", __func__);
+    return RET_SUCCESS;
+}
+#endif
+
+RESULT AR0830_IsiGetSensorIss(IsiSensor_t *pIsiSensor)
+{
+    TRACE( AR0830_INFO, "%s (enter)\n", __func__);
+
+    if (pIsiSensor == NULL)
+        return RET_NULL_POINTER;
+     pIsiSensor->pszName                         = SensorName;
+     pIsiSensor->pIsiSensorSetPowerIss           = AR0830_IsiSensorSetPowerIss;
+     pIsiSensor->pIsiCreateSensorIss             = AR0830_IsiCreateSensorIss;
+     pIsiSensor->pIsiReleaseSensorIss            = AR0830_IsiReleaseSensorIss;
+     pIsiSensor->pIsiRegisterReadIss             = AR0830_IsiRegisterReadIss;
+     pIsiSensor->pIsiRegisterWriteIss            = AR0830_IsiRegisterWriteIss;
+     pIsiSensor->pIsiGetSensorModeIss            = AR0830_IsiGetSensorModeIss;
+     pIsiSensor->pIsiSetSensorModeIss            = AR0830_IsiSetSensorModeIss;
+     pIsiSensor->pIsiQuerySensorIss              = AR0830_IsiQuerySensorIss;
+     pIsiSensor->pIsiGetCapsIss                  = AR0830_IsiGetCapsIss;
+     pIsiSensor->pIsiSetupSensorIss              = AR0830_IsiSetupSensorIss;
+     pIsiSensor->pIsiGetSensorRevisionIss        = AR0830_IsiGetSensorRevisionIss;
+     pIsiSensor->pIsiCheckSensorConnectionIss    = AR0830_IsiCheckSensorConnectionIss;
+     pIsiSensor->pIsiSensorSetStreamingIss       = AR0830_IsiSensorSetStreamingIss;
+     pIsiSensor->pIsiGetAeInfoIss                = AR0830_IsiGetAeInfoIss;
+     pIsiSensor->pIsiGetIntegrationTimeIss       = AR0830_IsiGetIntegrationTimeIss;
+     pIsiSensor->pIsiSetIntegrationTimeIss       = AR0830_IsiSetIntegrationTimeIss;
+     pIsiSensor->pIsiGetGainIss                  = AR0830_IsiGetGainIss;
+     pIsiSensor->pIsiSetGainIss                  = AR0830_IsiSetGainIss;
+     pIsiSensor->pIsiGetSensorFpsIss             = AR0830_IsiGetSensorFpsIss;
+     pIsiSensor->pIsiSetSensorFpsIss             = AR0830_IsiSetSensorFpsIss;
+     pIsiSensor->pIsiSetSensorAfpsLimitsIss      = AR0830_IsiSetSensorAfpsLimitsIss;
+     pIsiSensor->pIsiGetSensorIspStatusIss       = AR0830_IsiGetSensorIspStatusIss;
+#ifndef ISI_LITE
+    pIsiSensor->pIsiSensorSetWBIss               = AR0830_IsiSensorSetWBIss;
+    pIsiSensor->pIsiActivateTestPatternIss       = AR0830_IsiSetTestPatternIss;
+    pIsiSensor->pIsiFocusSetupIss                = AR0830_IsiFocusSetupIss;
+    pIsiSensor->pIsiFocusReleaseIss              = AR0830_IsiFocusReleaseIss;
+    pIsiSensor->pIsiFocusSetIss                  = AR0830_IsiFocusSetIss;
+    pIsiSensor->pIsiFocusGetIss                  = AR0830_IsiFocusGetIss;
+    pIsiSensor->pIsiGetFocusCalibrateIss         = AR0830_IsiGetFocusCalibrateIss;
+    pIsiSensor->pIsiSetAeStartExposureIss        = AR0830_IsiSetAeStartExposureIs;
+    pIsiSensor->pIsiGetAeStartExposureIss        = AR0830_IsiGetAeStartExposureIs;
+#endif
+    TRACE( AR0830_INFO, "%s (exit)\n", __func__);
+    return RET_SUCCESS;
+}
+
+/*****************************************************************************
+* each sensor driver need declare this struct for isi load
+*****************************************************************************/
+IsiCamDrvConfig_t IsiCamDrvConfig = {
+    .CameraDriverID = 0x2770,
+    .pIsiHalQuerySensor = AR0830_IsiHalQuerySensorIss,
+    .pfIsiGetSensorIss = AR0830_IsiGetSensorIss,
+};
diff --git a/units/isi/drv/AR0830/source/AR0830_mipi4lane_4k_init.txt b/units/isi/drv/AR0830/source/AR0830_mipi4lane_4k_init.txt
new file mode 100644
index 0000000..ecf02e2
--- /dev/null
+++ b/units/isi/drv/AR0830/source/AR0830_mipi4lane_4k_init.txt
@@ -0,0 +1,308 @@
+0x3042 0x1004
+0x30D2 0x0120
+0x30D4 0x0000
+0x3090 0x0000
+0x30FC 0x0060
+0x30FE 0x0060
+0x31E0 0x0781
+0x3180 0x9434
+0x317C 0xEFF4
+0x30EE 0x613E
+0x3F2C 0x4428
+0x3D00 0x0446
+0x3D02 0x4C66
+0x3D04 0xFFFF
+0x3D06 0xFFFF
+0x3D08 0x5E40
+0x3D0A 0x1146
+0x3D0C 0x5D41
+0x3D0E 0x1088
+0x3D10 0x8342
+0x3D12 0x00C0
+0x3D14 0x5580
+0x3D16 0x5B83
+0x3D18 0x6084
+0x3D1A 0x5A8D
+0x3D1C 0x00C0
+0x3D1E 0x8342
+0x3D20 0x925A
+0x3D22 0x8664
+0x3D24 0x1030
+0x3D26 0x801C
+0x3D28 0x00A0
+0x3D2A 0x56B0
+0x3D2C 0x5788
+0x3D2E 0x5150
+0x3D30 0x824D
+0x3D32 0x8D58
+0x3D34 0x58D2
+0x3D36 0x438A
+0x3D38 0x4592
+0x3D3A 0x458A
+0x3D3C 0x4389
+0x3D3E 0x51FF
+0x3D40 0x8451
+0x3D42 0x8410
+0x3D44 0x0C88
+0x3D46 0x5959
+0x3D48 0x8A5F
+0x3D4A 0xDA42
+0x3D4C 0x9361
+0x3D4E 0x8262
+0x3D50 0x8342
+0x3D52 0x8010
+0x3D54 0xC041
+0x3D56 0x64FF
+0x3D58 0xFFB7
+0x3D5A 0x4081
+0x3D5C 0x4080
+0x3D5E 0x4180
+0x3D60 0x4280
+0x3D62 0x438D
+0x3D64 0x44BA
+0x3D66 0x4488
+0x3D68 0x4380
+0x3D6A 0x4241
+0x3D6C 0x8140
+0x3D6E 0x8240
+0x3D70 0x8041
+0x3D72 0x8042
+0x3D74 0x8043
+0x3D76 0x8D44
+0x3D78 0xBA44
+0x3D7A 0x875E
+0x3D7C 0x4354
+0x3D7E 0x4241
+0x3D80 0x8140
+0x3D82 0x8120
+0x3D84 0x2881
+0x3D86 0x6026
+0x3D88 0x8055
+0x3D8A 0x8070
+0x3D8C 0x8040
+0x3D8E 0x4C81
+0x3D90 0x45C3
+0x3D92 0x4581
+0x3D94 0x4C40
+0x3D96 0x8070
+0x3D98 0x8040
+0x3D9A 0x4C85
+0x3D9C 0x6CA8
+0x3D9E 0x6C8C
+0x3DA0 0x000E
+0x3DA2 0xBE44
+0x3DA4 0x8844
+0x3DA6 0xBC78
+0x3DA8 0x0900
+0x3DAA 0x8904
+0x3DAC 0x8080
+0x3DAE 0x0240
+0x3DB0 0x8609
+0x3DB2 0x008E
+0x3DB4 0x0900
+0x3DB6 0x8002
+0x3DB8 0x4080
+0x3DBA 0x0480
+0x3DBC 0x887C
+0x3DBE 0xAA86
+0x3DC0 0x0900
+0x3DC2 0x877A
+0x3DC4 0x000E
+0x3DC6 0xC379
+0x3DC8 0x4C40
+0x3DCA 0xBF70
+0x3DCC 0x5E40
+0x3DCE 0x114E
+0x3DD0 0x5D41
+0x3DD2 0x5383
+0x3DD4 0x4200
+0x3DD6 0xC055
+0x3DD8 0xA400
+0x3DDA 0xC083
+0x3DDC 0x4288
+0x3DDE 0x6083
+0x3DE0 0x5B80
+0x3DE2 0x5A64
+0x3DE4 0x1030
+0x3DE6 0x801C
+0x3DE8 0x00A5
+0x3DEA 0x5697
+0x3DEC 0x57A5
+0x3DEE 0x5180
+0x3DF0 0x505A
+0x3DF2 0x814D
+0x3DF4 0x8358
+0x3DF6 0x8058
+0x3DF8 0xA943
+0x3DFA 0x8345
+0x3DFC 0xB045
+0x3DFE 0x8343
+0x3E00 0xA351
+0x3E02 0xE251
+0x3E04 0x8C59
+0x3E06 0x8059
+0x3E08 0x8A5F
+0x3E0A 0xEC7C
+0x3E0C 0xCC84
+0x3E0E 0x6182
+0x3E10 0x6283
+0x3E12 0x4283
+0x3E14 0x10CC
+0x3E16 0x6496
+0x3E18 0x4281
+0x3E1A 0x41BB
+0x3E1C 0x4082
+0x3E1E 0x407E
+0x3E20 0xCC41
+0x3E22 0x8042
+0x3E24 0x8043
+0x3E26 0x8300
+0x3E28 0xC088
+0x3E2A 0x44BA
+0x3E2C 0x4488
+0x3E2E 0x00C8
+0x3E30 0x8042
+0x3E32 0x4181
+0x3E34 0x4082
+0x3E36 0x4080
+0x3E38 0x4180
+0x3E3A 0x4280
+0x3E3C 0x4383
+0x3E3E 0x00C0
+0x3E40 0x8844
+0x3E42 0xBA44
+0x3E44 0x8800
+0x3E46 0xC880
+0x3E48 0x4241
+0x3E4A 0x8240
+0x3E4C 0x8140
+0x3E4E 0x8041
+0x3E50 0x8042
+0x3E52 0x8043
+0x3E54 0x8300
+0x3E56 0xC088
+0x3E58 0x44BA
+0x3E5A 0x4488
+0x3E5C 0x00C8
+0x3E5E 0x8042
+0x3E60 0x4181
+0x3E62 0x4082
+0x3E64 0x4080
+0x3E66 0x4180
+0x3E68 0x4280
+0x3E6A 0x4383
+0x3E6C 0x00C0
+0x3E6E 0x8844
+0x3E70 0xBA44
+0x3E72 0x8800
+0x3E74 0xC880
+0x3E76 0x4241
+0x3E78 0x8140
+0x3E7A 0x9F5E
+0x3E7C 0x8A54
+0x3E7E 0x8620
+0x3E80 0x2881
+0x3E82 0x6026
+0x3E84 0x8055
+0x3E86 0x8070
+0x3E88 0x0000
+0x3E8A 0x0000
+0x3E8C 0x0000
+0x3E8E 0x0000
+0x3E90 0x0000
+0x3E92 0x0000
+0x3E94 0x0000
+0x3E96 0x0000
+0x3E98 0x0000
+0x3E9A 0x0000
+0x3E9C 0x0000
+0x3E9E 0x0000
+0x3EA0 0x0000
+0x3EA2 0x0000
+0x3EA4 0x0000
+0x3EA6 0x0000
+0x3EA8 0x0000
+0x3EAA 0x0000
+0x3EAC 0x0000
+0x3EAE 0x0000
+0x3EB0 0x0000
+0x3EB2 0x0000
+0x3EB4 0x0000
+0x3EB6 0x004D
+0x3EBC 0xAA06
+0x3EC0 0x2E02
+0x3EC2 0x7700
+0x3EC4 0x1C08
+0x3EC6 0xEA44
+0x3EC8 0x0F0F
+0x3ECA 0x0F4A
+0x3ECC 0x0706
+0x3ECE 0x443B
+0x3ED0 0x12F0
+0x3ED2 0x0039
+0x3ED4 0x862F
+0x3ED6 0x4080
+0x3ED8 0x0523
+0x3EDA 0xF8AA
+0x3EDC 0x5078
+0x3EDE 0x5005
+0x316A 0x8200
+0x316E 0x8200
+0x316C 0x8200
+0x3EF0 0x414D
+0x3EF2 0x0101
+0x3EF6 0x0307
+0x3EFA 0x0F0F
+0x3EFC 0x0F0F
+0x3EFE 0x0F0F
+0x31B0 0x004D
+0x31B2 0x0028
+0x31B4 0x230E
+0x31B6 0x1348
+0x31B8 0x1C12
+0x31BA 0x185B
+0x31BC 0x8509
+0x0300 0x0004
+0x0302 0x0001
+0x0304 0x0505
+0x0306 0xB7B7
+0x0308 0x000A
+0x030A 0x0001
+0x0112 0x0A0A
+0x3016 0x0101
+0x0344 0x00C8
+0x0348 0x0FC7
+0x0346 0x01F0
+0x034A 0x0A5D
+0x034C 0x0780
+0x034E 0x0438
+0x3040 0x0043
+0x3172 0x0206
+0x317A 0x516E
+0x3F3C 0x0003
+0x0400 0x0001
+0x0404 0x0020
+0x0342 0x1230
+0x0340 0x0C4E
+0x0202 0x0C4E
+0x30FE 0x0060
+0x31E0 0x0781
+0x3F00 0x004F
+0x3F02 0x0125
+0x3F04 0x0020
+0x3F06 0x0040
+0x3F08 0x0070
+0x3F0A 0x0101
+0x3F0C 0x0302
+0x3F1E 0x0022
+0x3F1A 0x01FF
+0x3F14 0x0101
+0x3F44 0x0707
+0x3F18 0x011E
+0x3F12 0x0303
+0x3F42 0x1511
+0x3F16 0x011E
+0x3F10 0x0505
+0x3F40 0x1511
+0x3F3C 0x0003
+0x301A 0x021C
\ No newline at end of file
diff --git a/units/isi/drv/AR0830/source/formatted_output.txt b/units/isi/drv/AR0830/source/formatted_output.txt
new file mode 100644
index 0000000..e0c3c3f
--- /dev/null
+++ b/units/isi/drv/AR0830/source/formatted_output.txt
@@ -0,0 +1,308 @@
+{0x3042, 0x1004, AR0830_REG_VALUE_16BIT},
+{0x30D2, 0x0120, AR0830_REG_VALUE_16BIT},
+{0x30D4, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3090, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x30FC, 0x0060, AR0830_REG_VALUE_16BIT},
+{0x30FE, 0x0060, AR0830_REG_VALUE_16BIT},
+{0x31E0, 0x0781, AR0830_REG_VALUE_16BIT},
+{0x3180, 0x9434, AR0830_REG_VALUE_16BIT},
+{0x317C, 0xEFF4, AR0830_REG_VALUE_16BIT},
+{0x30EE, 0x613E, AR0830_REG_VALUE_16BIT},
+{0x3F2C, 0x4428, AR0830_REG_VALUE_16BIT},
+{0x3D00, 0x0446, AR0830_REG_VALUE_16BIT},
+{0x3D02, 0x4C66, AR0830_REG_VALUE_16BIT},
+{0x3D04, 0xFFFF, AR0830_REG_VALUE_16BIT},
+{0x3D06, 0xFFFF, AR0830_REG_VALUE_16BIT},
+{0x3D08, 0x5E40, AR0830_REG_VALUE_16BIT},
+{0x3D0A, 0x1146, AR0830_REG_VALUE_16BIT},
+{0x3D0C, 0x5D41, AR0830_REG_VALUE_16BIT},
+{0x3D0E, 0x1088, AR0830_REG_VALUE_16BIT},
+{0x3D10, 0x8342, AR0830_REG_VALUE_16BIT},
+{0x3D12, 0x00C0, AR0830_REG_VALUE_16BIT},
+{0x3D14, 0x5580, AR0830_REG_VALUE_16BIT},
+{0x3D16, 0x5B83, AR0830_REG_VALUE_16BIT},
+{0x3D18, 0x6084, AR0830_REG_VALUE_16BIT},
+{0x3D1A, 0x5A8D, AR0830_REG_VALUE_16BIT},
+{0x3D1C, 0x00C0, AR0830_REG_VALUE_16BIT},
+{0x3D1E, 0x8342, AR0830_REG_VALUE_16BIT},
+{0x3D20, 0x925A, AR0830_REG_VALUE_16BIT},
+{0x3D22, 0x8664, AR0830_REG_VALUE_16BIT},
+{0x3D24, 0x1030, AR0830_REG_VALUE_16BIT},
+{0x3D26, 0x801C, AR0830_REG_VALUE_16BIT},
+{0x3D28, 0x00A0, AR0830_REG_VALUE_16BIT},
+{0x3D2A, 0x56B0, AR0830_REG_VALUE_16BIT},
+{0x3D2C, 0x5788, AR0830_REG_VALUE_16BIT},
+{0x3D2E, 0x5150, AR0830_REG_VALUE_16BIT},
+{0x3D30, 0x824D, AR0830_REG_VALUE_16BIT},
+{0x3D32, 0x8D58, AR0830_REG_VALUE_16BIT},
+{0x3D34, 0x58D2, AR0830_REG_VALUE_16BIT},
+{0x3D36, 0x438A, AR0830_REG_VALUE_16BIT},
+{0x3D38, 0x4592, AR0830_REG_VALUE_16BIT},
+{0x3D3A, 0x458A, AR0830_REG_VALUE_16BIT},
+{0x3D3C, 0x4389, AR0830_REG_VALUE_16BIT},
+{0x3D3E, 0x51FF, AR0830_REG_VALUE_16BIT},
+{0x3D40, 0x8451, AR0830_REG_VALUE_16BIT},
+{0x3D42, 0x8410, AR0830_REG_VALUE_16BIT},
+{0x3D44, 0x0C88, AR0830_REG_VALUE_16BIT},
+{0x3D46, 0x5959, AR0830_REG_VALUE_16BIT},
+{0x3D48, 0x8A5F, AR0830_REG_VALUE_16BIT},
+{0x3D4A, 0xDA42, AR0830_REG_VALUE_16BIT},
+{0x3D4C, 0x9361, AR0830_REG_VALUE_16BIT},
+{0x3D4E, 0x8262, AR0830_REG_VALUE_16BIT},
+{0x3D50, 0x8342, AR0830_REG_VALUE_16BIT},
+{0x3D52, 0x8010, AR0830_REG_VALUE_16BIT},
+{0x3D54, 0xC041, AR0830_REG_VALUE_16BIT},
+{0x3D56, 0x64FF, AR0830_REG_VALUE_16BIT},
+{0x3D58, 0xFFB7, AR0830_REG_VALUE_16BIT},
+{0x3D5A, 0x4081, AR0830_REG_VALUE_16BIT},
+{0x3D5C, 0x4080, AR0830_REG_VALUE_16BIT},
+{0x3D5E, 0x4180, AR0830_REG_VALUE_16BIT},
+{0x3D60, 0x4280, AR0830_REG_VALUE_16BIT},
+{0x3D62, 0x438D, AR0830_REG_VALUE_16BIT},
+{0x3D64, 0x44BA, AR0830_REG_VALUE_16BIT},
+{0x3D66, 0x4488, AR0830_REG_VALUE_16BIT},
+{0x3D68, 0x4380, AR0830_REG_VALUE_16BIT},
+{0x3D6A, 0x4241, AR0830_REG_VALUE_16BIT},
+{0x3D6C, 0x8140, AR0830_REG_VALUE_16BIT},
+{0x3D6E, 0x8240, AR0830_REG_VALUE_16BIT},
+{0x3D70, 0x8041, AR0830_REG_VALUE_16BIT},
+{0x3D72, 0x8042, AR0830_REG_VALUE_16BIT},
+{0x3D74, 0x8043, AR0830_REG_VALUE_16BIT},
+{0x3D76, 0x8D44, AR0830_REG_VALUE_16BIT},
+{0x3D78, 0xBA44, AR0830_REG_VALUE_16BIT},
+{0x3D7A, 0x875E, AR0830_REG_VALUE_16BIT},
+{0x3D7C, 0x4354, AR0830_REG_VALUE_16BIT},
+{0x3D7E, 0x4241, AR0830_REG_VALUE_16BIT},
+{0x3D80, 0x8140, AR0830_REG_VALUE_16BIT},
+{0x3D82, 0x8120, AR0830_REG_VALUE_16BIT},
+{0x3D84, 0x2881, AR0830_REG_VALUE_16BIT},
+{0x3D86, 0x6026, AR0830_REG_VALUE_16BIT},
+{0x3D88, 0x8055, AR0830_REG_VALUE_16BIT},
+{0x3D8A, 0x8070, AR0830_REG_VALUE_16BIT},
+{0x3D8C, 0x8040, AR0830_REG_VALUE_16BIT},
+{0x3D8E, 0x4C81, AR0830_REG_VALUE_16BIT},
+{0x3D90, 0x45C3, AR0830_REG_VALUE_16BIT},
+{0x3D92, 0x4581, AR0830_REG_VALUE_16BIT},
+{0x3D94, 0x4C40, AR0830_REG_VALUE_16BIT},
+{0x3D96, 0x8070, AR0830_REG_VALUE_16BIT},
+{0x3D98, 0x8040, AR0830_REG_VALUE_16BIT},
+{0x3D9A, 0x4C85, AR0830_REG_VALUE_16BIT},
+{0x3D9C, 0x6CA8, AR0830_REG_VALUE_16BIT},
+{0x3D9E, 0x6C8C, AR0830_REG_VALUE_16BIT},
+{0x3DA0, 0x000E, AR0830_REG_VALUE_16BIT},
+{0x3DA2, 0xBE44, AR0830_REG_VALUE_16BIT},
+{0x3DA4, 0x8844, AR0830_REG_VALUE_16BIT},
+{0x3DA6, 0xBC78, AR0830_REG_VALUE_16BIT},
+{0x3DA8, 0x0900, AR0830_REG_VALUE_16BIT},
+{0x3DAA, 0x8904, AR0830_REG_VALUE_16BIT},
+{0x3DAC, 0x8080, AR0830_REG_VALUE_16BIT},
+{0x3DAE, 0x0240, AR0830_REG_VALUE_16BIT},
+{0x3DB0, 0x8609, AR0830_REG_VALUE_16BIT},
+{0x3DB2, 0x008E, AR0830_REG_VALUE_16BIT},
+{0x3DB4, 0x0900, AR0830_REG_VALUE_16BIT},
+{0x3DB6, 0x8002, AR0830_REG_VALUE_16BIT},
+{0x3DB8, 0x4080, AR0830_REG_VALUE_16BIT},
+{0x3DBA, 0x0480, AR0830_REG_VALUE_16BIT},
+{0x3DBC, 0x887C, AR0830_REG_VALUE_16BIT},
+{0x3DBE, 0xAA86, AR0830_REG_VALUE_16BIT},
+{0x3DC0, 0x0900, AR0830_REG_VALUE_16BIT},
+{0x3DC2, 0x877A, AR0830_REG_VALUE_16BIT},
+{0x3DC4, 0x000E, AR0830_REG_VALUE_16BIT},
+{0x3DC6, 0xC379, AR0830_REG_VALUE_16BIT},
+{0x3DC8, 0x4C40, AR0830_REG_VALUE_16BIT},
+{0x3DCA, 0xBF70, AR0830_REG_VALUE_16BIT},
+{0x3DCC, 0x5E40, AR0830_REG_VALUE_16BIT},
+{0x3DCE, 0x114E, AR0830_REG_VALUE_16BIT},
+{0x3DD0, 0x5D41, AR0830_REG_VALUE_16BIT},
+{0x3DD2, 0x5383, AR0830_REG_VALUE_16BIT},
+{0x3DD4, 0x4200, AR0830_REG_VALUE_16BIT},
+{0x3DD6, 0xC055, AR0830_REG_VALUE_16BIT},
+{0x3DD8, 0xA400, AR0830_REG_VALUE_16BIT},
+{0x3DDA, 0xC083, AR0830_REG_VALUE_16BIT},
+{0x3DDC, 0x4288, AR0830_REG_VALUE_16BIT},
+{0x3DDE, 0x6083, AR0830_REG_VALUE_16BIT},
+{0x3DE0, 0x5B80, AR0830_REG_VALUE_16BIT},
+{0x3DE2, 0x5A64, AR0830_REG_VALUE_16BIT},
+{0x3DE4, 0x1030, AR0830_REG_VALUE_16BIT},
+{0x3DE6, 0x801C, AR0830_REG_VALUE_16BIT},
+{0x3DE8, 0x00A5, AR0830_REG_VALUE_16BIT},
+{0x3DEA, 0x5697, AR0830_REG_VALUE_16BIT},
+{0x3DEC, 0x57A5, AR0830_REG_VALUE_16BIT},
+{0x3DEE, 0x5180, AR0830_REG_VALUE_16BIT},
+{0x3DF0, 0x505A, AR0830_REG_VALUE_16BIT},
+{0x3DF2, 0x814D, AR0830_REG_VALUE_16BIT},
+{0x3DF4, 0x8358, AR0830_REG_VALUE_16BIT},
+{0x3DF6, 0x8058, AR0830_REG_VALUE_16BIT},
+{0x3DF8, 0xA943, AR0830_REG_VALUE_16BIT},
+{0x3DFA, 0x8345, AR0830_REG_VALUE_16BIT},
+{0x3DFC, 0xB045, AR0830_REG_VALUE_16BIT},
+{0x3DFE, 0x8343, AR0830_REG_VALUE_16BIT},
+{0x3E00, 0xA351, AR0830_REG_VALUE_16BIT},
+{0x3E02, 0xE251, AR0830_REG_VALUE_16BIT},
+{0x3E04, 0x8C59, AR0830_REG_VALUE_16BIT},
+{0x3E06, 0x8059, AR0830_REG_VALUE_16BIT},
+{0x3E08, 0x8A5F, AR0830_REG_VALUE_16BIT},
+{0x3E0A, 0xEC7C, AR0830_REG_VALUE_16BIT},
+{0x3E0C, 0xCC84, AR0830_REG_VALUE_16BIT},
+{0x3E0E, 0x6182, AR0830_REG_VALUE_16BIT},
+{0x3E10, 0x6283, AR0830_REG_VALUE_16BIT},
+{0x3E12, 0x4283, AR0830_REG_VALUE_16BIT},
+{0x3E14, 0x10CC, AR0830_REG_VALUE_16BIT},
+{0x3E16, 0x6496, AR0830_REG_VALUE_16BIT},
+{0x3E18, 0x4281, AR0830_REG_VALUE_16BIT},
+{0x3E1A, 0x41BB, AR0830_REG_VALUE_16BIT},
+{0x3E1C, 0x4082, AR0830_REG_VALUE_16BIT},
+{0x3E1E, 0x407E, AR0830_REG_VALUE_16BIT},
+{0x3E20, 0xCC41, AR0830_REG_VALUE_16BIT},
+{0x3E22, 0x8042, AR0830_REG_VALUE_16BIT},
+{0x3E24, 0x8043, AR0830_REG_VALUE_16BIT},
+{0x3E26, 0x8300, AR0830_REG_VALUE_16BIT},
+{0x3E28, 0xC088, AR0830_REG_VALUE_16BIT},
+{0x3E2A, 0x44BA, AR0830_REG_VALUE_16BIT},
+{0x3E2C, 0x4488, AR0830_REG_VALUE_16BIT},
+{0x3E2E, 0x00C8, AR0830_REG_VALUE_16BIT},
+{0x3E30, 0x8042, AR0830_REG_VALUE_16BIT},
+{0x3E32, 0x4181, AR0830_REG_VALUE_16BIT},
+{0x3E34, 0x4082, AR0830_REG_VALUE_16BIT},
+{0x3E36, 0x4080, AR0830_REG_VALUE_16BIT},
+{0x3E38, 0x4180, AR0830_REG_VALUE_16BIT},
+{0x3E3A, 0x4280, AR0830_REG_VALUE_16BIT},
+{0x3E3C, 0x4383, AR0830_REG_VALUE_16BIT},
+{0x3E3E, 0x00C0, AR0830_REG_VALUE_16BIT},
+{0x3E40, 0x8844, AR0830_REG_VALUE_16BIT},
+{0x3E42, 0xBA44, AR0830_REG_VALUE_16BIT},
+{0x3E44, 0x8800, AR0830_REG_VALUE_16BIT},
+{0x3E46, 0xC880, AR0830_REG_VALUE_16BIT},
+{0x3E48, 0x4241, AR0830_REG_VALUE_16BIT},
+{0x3E4A, 0x8240, AR0830_REG_VALUE_16BIT},
+{0x3E4C, 0x8140, AR0830_REG_VALUE_16BIT},
+{0x3E4E, 0x8041, AR0830_REG_VALUE_16BIT},
+{0x3E50, 0x8042, AR0830_REG_VALUE_16BIT},
+{0x3E52, 0x8043, AR0830_REG_VALUE_16BIT},
+{0x3E54, 0x8300, AR0830_REG_VALUE_16BIT},
+{0x3E56, 0xC088, AR0830_REG_VALUE_16BIT},
+{0x3E58, 0x44BA, AR0830_REG_VALUE_16BIT},
+{0x3E5A, 0x4488, AR0830_REG_VALUE_16BIT},
+{0x3E5C, 0x00C8, AR0830_REG_VALUE_16BIT},
+{0x3E5E, 0x8042, AR0830_REG_VALUE_16BIT},
+{0x3E60, 0x4181, AR0830_REG_VALUE_16BIT},
+{0x3E62, 0x4082, AR0830_REG_VALUE_16BIT},
+{0x3E64, 0x4080, AR0830_REG_VALUE_16BIT},
+{0x3E66, 0x4180, AR0830_REG_VALUE_16BIT},
+{0x3E68, 0x4280, AR0830_REG_VALUE_16BIT},
+{0x3E6A, 0x4383, AR0830_REG_VALUE_16BIT},
+{0x3E6C, 0x00C0, AR0830_REG_VALUE_16BIT},
+{0x3E6E, 0x8844, AR0830_REG_VALUE_16BIT},
+{0x3E70, 0xBA44, AR0830_REG_VALUE_16BIT},
+{0x3E72, 0x8800, AR0830_REG_VALUE_16BIT},
+{0x3E74, 0xC880, AR0830_REG_VALUE_16BIT},
+{0x3E76, 0x4241, AR0830_REG_VALUE_16BIT},
+{0x3E78, 0x8140, AR0830_REG_VALUE_16BIT},
+{0x3E7A, 0x9F5E, AR0830_REG_VALUE_16BIT},
+{0x3E7C, 0x8A54, AR0830_REG_VALUE_16BIT},
+{0x3E7E, 0x8620, AR0830_REG_VALUE_16BIT},
+{0x3E80, 0x2881, AR0830_REG_VALUE_16BIT},
+{0x3E82, 0x6026, AR0830_REG_VALUE_16BIT},
+{0x3E84, 0x8055, AR0830_REG_VALUE_16BIT},
+{0x3E86, 0x8070, AR0830_REG_VALUE_16BIT},
+{0x3E88, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E8A, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E8C, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E8E, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E90, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E92, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E94, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E96, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E98, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E9A, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E9C, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3E9E, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EA0, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EA2, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EA4, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EA6, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EA8, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EAA, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EAC, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EAE, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EB0, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EB2, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EB4, 0x0000, AR0830_REG_VALUE_16BIT},
+{0x3EB6, 0x004D, AR0830_REG_VALUE_16BIT},
+{0x3EBC, 0xAA06, AR0830_REG_VALUE_16BIT},
+{0x3EC0, 0x2E02, AR0830_REG_VALUE_16BIT},
+{0x3EC2, 0x7700, AR0830_REG_VALUE_16BIT},
+{0x3EC4, 0x1C08, AR0830_REG_VALUE_16BIT},
+{0x3EC6, 0xEA44, AR0830_REG_VALUE_16BIT},
+{0x3EC8, 0x0F0F, AR0830_REG_VALUE_16BIT},
+{0x3ECA, 0x0F4A, AR0830_REG_VALUE_16BIT},
+{0x3ECC, 0x0706, AR0830_REG_VALUE_16BIT},
+{0x3ECE, 0x443B, AR0830_REG_VALUE_16BIT},
+{0x3ED0, 0x12F0, AR0830_REG_VALUE_16BIT},
+{0x3ED2, 0x0039, AR0830_REG_VALUE_16BIT},
+{0x3ED4, 0x862F, AR0830_REG_VALUE_16BIT},
+{0x3ED6, 0x4080, AR0830_REG_VALUE_16BIT},
+{0x3ED8, 0x0523, AR0830_REG_VALUE_16BIT},
+{0x3EDA, 0xF8AA, AR0830_REG_VALUE_16BIT},
+{0x3EDC, 0x5078, AR0830_REG_VALUE_16BIT},
+{0x3EDE, 0x5005, AR0830_REG_VALUE_16BIT},
+{0x316A, 0x8200, AR0830_REG_VALUE_16BIT},
+{0x316E, 0x8200, AR0830_REG_VALUE_16BIT},
+{0x316C, 0x8200, AR0830_REG_VALUE_16BIT},
+{0x3EF0, 0x414D, AR0830_REG_VALUE_16BIT},
+{0x3EF2, 0x0101, AR0830_REG_VALUE_16BIT},
+{0x3EF6, 0x0307, AR0830_REG_VALUE_16BIT},
+{0x3EFA, 0x0F0F, AR0830_REG_VALUE_16BIT},
+{0x3EFC, 0x0F0F, AR0830_REG_VALUE_16BIT},
+{0x3EFE, 0x0F0F, AR0830_REG_VALUE_16BIT},
+{0x31B0, 0x004D, AR0830_REG_VALUE_16BIT},
+{0x31B2, 0x0028, AR0830_REG_VALUE_16BIT},
+{0x31B4, 0x230E, AR0830_REG_VALUE_16BIT},
+{0x31B6, 0x1348, AR0830_REG_VALUE_16BIT},
+{0x31B8, 0x1C12, AR0830_REG_VALUE_16BIT},
+{0x31BA, 0x185B, AR0830_REG_VALUE_16BIT},
+{0x31BC, 0x8509, AR0830_REG_VALUE_16BIT},
+{0x0300, 0x0004, AR0830_REG_VALUE_16BIT},
+{0x0302, 0x0001, AR0830_REG_VALUE_16BIT},
+{0x0304, 0x0505, AR0830_REG_VALUE_16BIT},
+{0x0306, 0xB7B7, AR0830_REG_VALUE_16BIT},
+{0x0308, 0x000A, AR0830_REG_VALUE_16BIT},
+{0x030A, 0x0001, AR0830_REG_VALUE_16BIT},
+{0x0112, 0x0A0A, AR0830_REG_VALUE_16BIT},
+{0x3016, 0x0101, AR0830_REG_VALUE_16BIT},
+{0x0344, 0x00C8, AR0830_REG_VALUE_16BIT},
+{0x0348, 0x0FC7, AR0830_REG_VALUE_16BIT},
+{0x0346, 0x01F0, AR0830_REG_VALUE_16BIT},
+{0x034A, 0x0A5D, AR0830_REG_VALUE_16BIT},
+{0x034C, 0x0780, AR0830_REG_VALUE_16BIT},
+{0x034E, 0x0438, AR0830_REG_VALUE_16BIT},
+{0x3040, 0x0043, AR0830_REG_VALUE_16BIT},
+{0x3172, 0x0206, AR0830_REG_VALUE_16BIT},
+{0x317A, 0x516E, AR0830_REG_VALUE_16BIT},
+{0x3F3C, 0x0003, AR0830_REG_VALUE_16BIT},
+{0x0400, 0x0001, AR0830_REG_VALUE_16BIT},
+{0x0404, 0x0020, AR0830_REG_VALUE_16BIT},
+{0x0342, 0x1230, AR0830_REG_VALUE_16BIT},
+{0x0340, 0x0C4E, AR0830_REG_VALUE_16BIT},
+{0x0202, 0x0C4E, AR0830_REG_VALUE_16BIT},
+{0x30FE, 0x0060, AR0830_REG_VALUE_16BIT},
+{0x31E0, 0x0781, AR0830_REG_VALUE_16BIT},
+{0x3F00, 0x004F, AR0830_REG_VALUE_16BIT},
+{0x3F02, 0x0125, AR0830_REG_VALUE_16BIT},
+{0x3F04, 0x0020, AR0830_REG_VALUE_16BIT},
+{0x3F06, 0x0040, AR0830_REG_VALUE_16BIT},
+{0x3F08, 0x0070, AR0830_REG_VALUE_16BIT},
+{0x3F0A, 0x0101, AR0830_REG_VALUE_16BIT},
+{0x3F0C, 0x0302, AR0830_REG_VALUE_16BIT},
+{0x3F1E, 0x0022, AR0830_REG_VALUE_16BIT},
+{0x3F1A, 0x01FF, AR0830_REG_VALUE_16BIT},
+{0x3F14, 0x0101, AR0830_REG_VALUE_16BIT},
+{0x3F44, 0x0707, AR0830_REG_VALUE_16BIT},
+{0x3F18, 0x011E, AR0830_REG_VALUE_16BIT},
+{0x3F12, 0x0303, AR0830_REG_VALUE_16BIT},
+{0x3F42, 0x1511, AR0830_REG_VALUE_16BIT},
+{0x3F16, 0x011E, AR0830_REG_VALUE_16BIT},
+{0x3F10, 0x0505, AR0830_REG_VALUE_16BIT},
+{0x3F40, 0x1511, AR0830_REG_VALUE_16BIT},
+{0x3F3C, 0x0003, AR0830_REG_VALUE_16BIT},
+{0x301A, 0x021C, AR0830_REG_VALUE_16BIT},
diff --git a/units/isi/drv/AR0830/source/reformat_hex_file.py b/units/isi/drv/AR0830/source/reformat_hex_file.py
new file mode 100755
index 0000000..f923f46
--- /dev/null
+++ b/units/isi/drv/AR0830/source/reformat_hex_file.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python3
+
+def process_file(file_path):
+    try:
+        with open(file_path, 'r') as file:
+            lines = file.readlines()
+
+        # Open output file to write the formatted data
+        with open('formatted_output.txt', 'w') as out_file:
+            for line in lines:
+                line = line.strip()
+                if not line or line.startswith("#"):  # Ignore empty lines or comments
+                    continue
+
+                try:
+                    # Split the line into address and value
+                    address, value = line.split()
+                    address = int(address, 16)  # Convert from hex to integer
+                    value = int(value, 16)      # Convert from hex to integer
+
+                    # Write in the desired format
+                    formatted_line = f"{{0x{address:04X}, 0x{value:04X}, AR0830_REG_VALUE_16BIT}},\n"
+                    out_file.write(formatted_line)
+
+                except ValueError:
+                    print(f"Invalid line format: {line}", file=sys.stderr)
+        print("Reformatted output saved to 'formatted_output.txt'.")
+    except FileNotFoundError:
+        print(f"Error: File '{file_path}' not found.", file=sys.stderr)
+    except Exception as e:
+        print(f"An error occurred: {e}", file=sys.stderr)
+
+
+if __name__ == "__main__":
+    import sys
+
+    if len(sys.argv) != 2:
+        print(f"Usage: {sys.argv[0]} <file_path>", file=sys.stderr)
+        sys.exit(1)
+
+    file_path = sys.argv[1]
+    process_file(file_path)
+
diff --git a/units/isi/drv/Sensor0_Entry.cfg b/units/isi/drv/Sensor0_Entry.cfg
index c40c432..466dbfc 100644
--- a/units/isi/drv/Sensor0_Entry.cfg
+++ b/units/isi/drv/Sensor0_Entry.cfg
@@ -1,20 +1,11 @@
-name="basler-vvcam"
-drv ="daA3840_30mc.drv"
-mode = 2
+name="ar0830"
+drv ="ar0830.drv"
+mode = 0
 
 [mode.0]
-xml = "DAA3840_30MC_4K-linear.xml"
-dwe = "dewarp_config/daA3840_30mc_4K.json"
+xml = "AR0830.xml"
+dwe = "dewarp_config/sensor_dwe_os08a20_4K_config.json"
 
 [mode.1]
-xml = "DAA3840_30MC_1080P-linear.xml"
-dwe = "dewarp_config/daA3840_30mc_1080P.json"
-
-[mode.2]
-xml = "DAA3840_30MC_4K-hdr.xml"
-dwe = "dewarp_config/daA3840_30mc_4K.json"
-
-[mode.3]
-xml = "DAA3840_30MC_1080P-hdr.xml"
-dwe = "dewarp_config/daA3840_30mc_1080P.json"
-
+xml = "AR0830.xml"
+dwe = "dewarp_config/sensor_dwe_os08a20_4K_config.json"
diff --git a/units/isi/drv/Sensor0_Entry.cfg.bak b/units/isi/drv/Sensor0_Entry.cfg.bak
new file mode 100644
index 0000000..c40c432
--- /dev/null
+++ b/units/isi/drv/Sensor0_Entry.cfg.bak
@@ -0,0 +1,20 @@
+name="basler-vvcam"
+drv ="daA3840_30mc.drv"
+mode = 2
+
+[mode.0]
+xml = "DAA3840_30MC_4K-linear.xml"
+dwe = "dewarp_config/daA3840_30mc_4K.json"
+
+[mode.1]
+xml = "DAA3840_30MC_1080P-linear.xml"
+dwe = "dewarp_config/daA3840_30mc_1080P.json"
+
+[mode.2]
+xml = "DAA3840_30MC_4K-hdr.xml"
+dwe = "dewarp_config/daA3840_30mc_4K.json"
+
+[mode.3]
+xml = "DAA3840_30MC_1080P-hdr.xml"
+dwe = "dewarp_config/daA3840_30mc_1080P.json"
+
-- 
2.34.1

